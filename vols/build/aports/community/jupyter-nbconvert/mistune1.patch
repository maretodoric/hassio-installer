--- ./nbconvert/filters/markdown_mistune.py.orig
+++ ./nbconvert/filters/markdown_mistune.py
@@ -21,7 +21,7 @@
     from cgi import escape as html_escape
 
 import bs4
-import mistune
+import mistune1
 from pygments import highlight
 from pygments.formatters import HtmlFormatter
 from pygments.lexers import get_lexer_by_name
@@ -34,7 +34,7 @@
     pass
 
 
-class MathBlockGrammar(mistune.BlockGrammar):
+class MathBlockGrammar(mistune1.BlockGrammar):
     """This defines a single regex comprised of the different patterns that
     identify math content spanning multiple lines. These are used by the
     MathBlockLexer.
@@ -46,12 +46,12 @@
     multiline_math = re.compile(multi_math_str, re.DOTALL)
 
 
-class MathBlockLexer(mistune.BlockLexer):
+class MathBlockLexer(mistune1.BlockLexer):
     """This acts as a pass-through to the MathInlineLexer. It is needed in
     order to avoid other block level rules splitting math sections apart.
     """
 
-    default_rules = ["multiline_math"] + mistune.BlockLexer.default_rules
+    default_rules = ["multiline_math"] + mistune1.BlockLexer.default_rules
 
     def __init__(self, rules=None, **kwargs):
         if rules is None:
@@ -63,7 +63,7 @@
         self.tokens.append({"type": "multiline_math", "text": m.group(0)})
 
 
-class MathInlineGrammar(mistune.InlineGrammar):
+class MathInlineGrammar(mistune1.InlineGrammar):
     """This defines different ways of declaring math objects that should be
     passed through to mathjax unaffected. These are used by the MathInlineLexer.
     """
@@ -74,7 +74,7 @@
     text = re.compile(r"^[\s\S]+?(?=[\\<!\[_*`~$]|https?://| {2,}\n|$)")
 
 
-class MathInlineLexer(mistune.InlineLexer):
+class MathInlineLexer(mistune1.InlineLexer):
     r"""This interprets the content of LaTeX style math objects using the rules
     defined by the MathInlineGrammar.
 
@@ -87,7 +87,7 @@
         "block_math",
         "inline_math",
         "latex_environment",
-    ] + mistune.InlineLexer.default_rules
+    ] + mistune1.InlineLexer.default_rules
 
     def __init__(self, renderer, rules=None, **kwargs):
         if rules is None:
@@ -104,7 +104,7 @@
         return self.renderer.latex_environment(m.group(1), m.group(2))
 
 
-class MarkdownWithMath(mistune.Markdown):
+class MarkdownWithMath(mistune1.Markdown):
     def __init__(self, renderer, **kwargs):
         if "inline" not in kwargs:
             kwargs["inline"] = MathInlineLexer
@@ -116,7 +116,7 @@
         return self.inline(self.token["text"])
 
 
-class IPythonRenderer(mistune.Renderer):
+class IPythonRenderer(mistune1.Renderer):
     def block_code(self, code, lang):
         if lang:
             try:
@@ -126,7 +126,7 @@
                 lang = None
 
         if not lang:
-            return "\n<pre><code>%s</code></pre>\n" % mistune.escape(code)
+            return "\n<pre><code>%s</code></pre>\n" % mistune1.escape(code)
 
         formatter = HtmlFormatter()
         return highlight(code, lexer, formatter)
