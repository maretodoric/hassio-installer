--- a/c++/test/CreateTestFiles.cc
+++ b/c++/test/CreateTestFiles.cc
@@ -45,20 +45,20 @@
     exit(1);
   }
   orc::proto::PostScript ps;
-  ps.set_footerlength(static_cast<uint64_t>(footer.ByteSize()));
+  ps.set_footerlength(static_cast<uint64_t>(footer.ByteSizeLong()));
   ps.set_compression(orc::proto::NONE);
   ps.set_compressionblocksize(64*1024);
   for(size_t i=0; i < version.size(); ++i) {
     ps.add_version(version[i]);
   }
-  ps.set_metadatalength(static_cast<uint64_t>(metadata.ByteSize()));
+  ps.set_metadatalength(static_cast<uint64_t>(metadata.ByteSizeLong()));
   ps.set_writerversion(writerVersion);
   ps.set_magic("ORC");
   if (!ps.SerializeToOstream(&output)) {
     std::cerr << "Failed to write postscript for " << filename << "\n";
     exit(1);
   }
-  output.put(static_cast<char>(ps.ByteSize()));
+  output.put(static_cast<char>(ps.ByteSizeLong()));
 }
 
 /**
--- a/c++/test/TestBufferedOutputStream.cc
+++ b/c++/test/TestBufferedOutputStream.cc
@@ -110,7 +110,7 @@
 
     EXPECT_TRUE(ps.SerializeToZeroCopyStream(&bufStream));
     bufStream.flush();
-    EXPECT_EQ(ps.ByteSize(), memStream.getLength());
+    EXPECT_EQ(ps.ByteSizeLong(), memStream.getLength());
 
     proto::PostScript ps2;
     ps2.ParseFromArray(
