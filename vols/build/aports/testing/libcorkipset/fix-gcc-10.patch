From a672165912e67333f87d8655d6fb416ba07aa595 Mon Sep 17 00:00:00 2001
From: mochaaP <git@mochaa.ws>
Date: Sun, 22 May 2022 06:51:17 +0000
Subject: [PATCH] Fix compilation errors with the recent gcc

Ported <https://github.com/dcreager/libcork/pull/170>

Make the code compile on the recent gcc. The patch
does following things:

  - Adopt to the new libcheck api. The old ones like
  fail, fail_if, fail_unless are deprecated and can't
  compile on the recent gcc.
  - Other format-string related fixes like unmatched
  types.
---
 tests/test-assignment.c |  34 +++++-----
 tests/test-bdd.c        | 142 ++++++++++++++++++++--------------------
 tests/test-ipmap.c      |  72 ++++++++++----------
 tests/test-ipset.c      | 102 ++++++++++++++---------------
 tests/test-iterator.c   | 140 +++++++++++++++++++--------------------
 5 files changed, 245 insertions(+), 245 deletions(-)

diff --git a/tests/test-assignment.c b/tests/test-assignment.c
index 3e871bf..a45e9bb 100644
--- a/tests/test-assignment.c
+++ b/tests/test-assignment.c
@@ -30,7 +30,7 @@ START_TEST(test_bdd_assignment_empty_equal)
     a1 = ipset_assignment_new();
     a2 = ipset_assignment_new();
 
-    fail_unless(ipset_assignment_equal(a1, a2),
+    ck_assert_msg(ipset_assignment_equal(a1, a2),
                 "Assignments should be equal");
 
     ipset_assignment_free(a1);
@@ -52,7 +52,7 @@ START_TEST(test_bdd_assignment_equal_1)
     ipset_assignment_set(a2, 0, IPSET_TRUE);
     ipset_assignment_set(a2, 1, IPSET_FALSE);
 
-    fail_unless(ipset_assignment_equal(a1, a2),
+    ck_assert_msg(ipset_assignment_equal(a1, a2),
                 "Assignments should be equal");
 
     ipset_assignment_free(a1);
@@ -75,7 +75,7 @@ START_TEST(test_bdd_assignment_equal_2)
     ipset_assignment_set(a2, 1, IPSET_FALSE);
     ipset_assignment_set(a2, 4, IPSET_EITHER);
 
-    fail_unless(ipset_assignment_equal(a1, a2),
+    ck_assert_msg(ipset_assignment_equal(a1, a2),
                 "Assignments should be equal");
 
     ipset_assignment_free(a1);
@@ -102,7 +102,7 @@ START_TEST(test_bdd_assignment_cut_1)
 
     ipset_assignment_cut(a2, 2);
 
-    fail_unless(ipset_assignment_equal(a1, a2),
+    ck_assert_msg(ipset_assignment_equal(a1, a2),
                 "Assignments should be equal");
 
     ipset_assignment_free(a1);
@@ -129,15 +129,15 @@ START_TEST(test_bdd_assignment_expand_1)
     uint8_t  ea[1];
     memset(ea, 0, 1);
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "Expanded assignment shouldn't be empty");
     IPSET_BIT_SET(ea, 0, true);
     IPSET_BIT_SET(ea, 1, false);
-    fail_unless(memcmp(ea, it->values.buf, 1) == 0,
+    ck_assert_msg(memcmp(ea, it->values.buf, 1) == 0,
                 "Expanded assignment doesn't match");
 
     ipset_expanded_assignment_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "Expanded assignment should have 1 element");
 
     ipset_expanded_assignment_free(it);
@@ -160,25 +160,25 @@ START_TEST(test_bdd_assignment_expand_2)
     uint8_t  ea[1];
     memset(ea, 0, 1);
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "Expanded assignment shouldn't be empty");
     IPSET_BIT_SET(ea, 0, true);
     IPSET_BIT_SET(ea, 1, false);
     IPSET_BIT_SET(ea, 2, false);
-    fail_unless(memcmp(ea, it->values.buf, 1) == 0,
+    ck_assert_msg(memcmp(ea, it->values.buf, 1) == 0,
                 "Expanded assignment 1 doesn't match");
 
     ipset_expanded_assignment_advance(it);
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
                 "Expanded assignment should have at least 1 element");
     IPSET_BIT_SET(ea, 0, true);
     IPSET_BIT_SET(ea, 1, false);
     IPSET_BIT_SET(ea, 2, true);
-    fail_unless(memcmp(ea, it->values.buf, 1) == 0,
+    ck_assert_msg(memcmp(ea, it->values.buf, 1) == 0,
                 "Expanded assignment 2 doesn't match");
 
     ipset_expanded_assignment_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "Expanded assignment should have 2 elements");
 
     ipset_expanded_assignment_free(it);
@@ -201,25 +201,25 @@ START_TEST(test_bdd_assignment_expand_3)
     uint8_t  ea[1];
     memset(ea, 0, 1);
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "Expanded assignment shouldn't be empty");
     IPSET_BIT_SET(ea, 0, true);
     IPSET_BIT_SET(ea, 1, false);
     IPSET_BIT_SET(ea, 2, false);
-    fail_unless(memcmp(ea, it->values.buf, 1) == 0,
+    ck_assert_msg(memcmp(ea, it->values.buf, 1) == 0,
                 "Expanded assignment 1 doesn't match");
 
     ipset_expanded_assignment_advance(it);
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
                 "Expanded assignment should have at least 1 element");
     IPSET_BIT_SET(ea, 0, true);
     IPSET_BIT_SET(ea, 1, true);
     IPSET_BIT_SET(ea, 2, false);
-    fail_unless(memcmp(ea, it->values.buf, 1) == 0,
+    ck_assert_msg(memcmp(ea, it->values.buf, 1) == 0,
                 "Expanded assignment 2 doesn't match");
 
     ipset_expanded_assignment_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "Expanded assignment should have 2 elements");
 
     ipset_expanded_assignment_free(it);
diff --git a/tests/test-bdd.c b/tests/test-bdd.c
index 23b90e7..6a827e8 100644
--- a/tests/test-bdd.c
+++ b/tests/test-bdd.c
@@ -70,25 +70,25 @@ START_TEST(test_bit_get)
     DESCRIBE_TEST;
     uint16_t  a = CORK_UINT16_HOST_TO_BIG(0x6012); /* 0110 0000 0001 0010 */
 
-    fail_unless(IPSET_BIT_GET(&a,  0) == 0, "Bit 0 is incorrect");
-    fail_unless(IPSET_BIT_GET(&a,  1) == 1, "Bit 1 is incorrect");
-    fail_unless(IPSET_BIT_GET(&a,  2) == 1, "Bit 2 is incorrect");
-    fail_unless(IPSET_BIT_GET(&a,  3) == 0, "Bit 3 is incorrect");
-
-    fail_unless(IPSET_BIT_GET(&a,  4) == 0, "Bit 4 is incorrect");
-    fail_unless(IPSET_BIT_GET(&a,  5) == 0, "Bit 5 is incorrect");
-    fail_unless(IPSET_BIT_GET(&a,  6) == 0, "Bit 6 is incorrect");
-    fail_unless(IPSET_BIT_GET(&a,  7) == 0, "Bit 7 is incorrect");
-
-    fail_unless(IPSET_BIT_GET(&a,  8) == 0, "Bit 8 is incorrect");
-    fail_unless(IPSET_BIT_GET(&a,  9) == 0, "Bit 9 is incorrect");
-    fail_unless(IPSET_BIT_GET(&a, 10) == 0, "Bit 10 is incorrect");
-    fail_unless(IPSET_BIT_GET(&a, 11) == 1, "Bit 11 is incorrect");
-
-    fail_unless(IPSET_BIT_GET(&a, 12) == 0, "Bit 12 is incorrect");
-    fail_unless(IPSET_BIT_GET(&a, 13) == 0, "Bit 13 is incorrect");
-    fail_unless(IPSET_BIT_GET(&a, 14) == 1, "Bit 14 is incorrect");
-    fail_unless(IPSET_BIT_GET(&a, 15) == 0, "Bit 15 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a,  0) == 0, "Bit 0 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a,  1) == 1, "Bit 1 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a,  2) == 1, "Bit 2 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a,  3) == 0, "Bit 3 is incorrect");
+
+    ck_assert_msg(IPSET_BIT_GET(&a,  4) == 0, "Bit 4 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a,  5) == 0, "Bit 5 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a,  6) == 0, "Bit 6 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a,  7) == 0, "Bit 7 is incorrect");
+
+    ck_assert_msg(IPSET_BIT_GET(&a,  8) == 0, "Bit 8 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a,  9) == 0, "Bit 9 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a, 10) == 0, "Bit 10 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a, 11) == 1, "Bit 11 is incorrect");
+
+    ck_assert_msg(IPSET_BIT_GET(&a, 12) == 0, "Bit 12 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a, 13) == 0, "Bit 13 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a, 14) == 1, "Bit 14 is incorrect");
+    ck_assert_msg(IPSET_BIT_GET(&a, 15) == 0, "Bit 15 is incorrect");
 }
 END_TEST
 
@@ -118,7 +118,7 @@ START_TEST(test_bit_set)
     IPSET_BIT_SET(&a, 14, 1);
     IPSET_BIT_SET(&a, 15, 0);
 
-    fail_unless(CORK_UINT16_HOST_TO_BIG(0x6012) == a,
+    ck_assert_msg(CORK_UINT16_HOST_TO_BIG(0x6012) == a,
                 "Incorrect bit result: 0x%04" PRIu16, a);
 }
 END_TEST
@@ -135,10 +135,10 @@ START_TEST(test_bdd_false_terminal)
 
     ipset_node_id  n_false = ipset_terminal_node_id(false);
 
-    fail_unless(ipset_node_get_type(n_false) == IPSET_TERMINAL_NODE,
+    ck_assert_msg(ipset_node_get_type(n_false) == IPSET_TERMINAL_NODE,
                 "False terminal has wrong type");
 
-    fail_unless(ipset_terminal_value(n_false) == false,
+    ck_assert_msg(ipset_terminal_value(n_false) == false,
                 "False terminal has wrong value");
 
     ipset_node_decref(cache, n_false);
@@ -154,10 +154,10 @@ START_TEST(test_bdd_true_terminal)
 
     ipset_node_id  n_true = ipset_terminal_node_id(true);
 
-    fail_unless(ipset_node_get_type(n_true) == IPSET_TERMINAL_NODE,
+    ck_assert_msg(ipset_node_get_type(n_true) == IPSET_TERMINAL_NODE,
                 "True terminal has wrong type");
 
-    fail_unless(ipset_terminal_value(n_true) == true,
+    ck_assert_msg(ipset_terminal_value(n_true) == true,
                 "True terminal has wrong value");
 
     ipset_node_decref(cache, n_true);
@@ -174,7 +174,7 @@ START_TEST(test_bdd_terminal_reduced_1)
     ipset_node_id  node1 = ipset_terminal_node_id(false);
     ipset_node_id  node2 = ipset_terminal_node_id(false);
 
-    fail_unless(node1 == node2,
+    ck_assert_msg(node1 == node2,
                 "Terminal node isn't reduced");
 
     ipset_node_decref(cache, node1);
@@ -199,16 +199,16 @@ START_TEST(test_bdd_nonterminal_1)
     ipset_node_id  node =
         ipset_node_cache_nonterminal(cache, 0, n_false, n_true);
 
-    fail_unless(ipset_node_get_type(node) == IPSET_NONTERMINAL_NODE,
+    ck_assert_msg(ipset_node_get_type(node) == IPSET_NONTERMINAL_NODE,
                 "Nonterminal has wrong type");
 
     struct ipset_node  *n = ipset_node_cache_get_nonterminal(cache, node);
 
-    fail_unless(n->variable == 0,
+    ck_assert_msg(n->variable == 0,
                 "Nonterminal has wrong variable");
-    fail_unless(n->low == n_false,
+    ck_assert_msg(n->low == n_false,
                 "Nonterminal has wrong low pointer");
-    fail_unless(n->high == n_true,
+    ck_assert_msg(n->high == n_true,
                 "Nonterminal has wrong high pointer");
 
     ipset_node_decref(cache, node);
@@ -234,7 +234,7 @@ START_TEST(test_bdd_nonterminal_reduced_1)
     ipset_node_id  node2 =
         ipset_node_cache_nonterminal(cache, 0, n_false, n_true);
 
-    fail_unless(node1 == node2,
+    ck_assert_msg(node1 == node2,
                 "Nonterminal node isn't reduced");
 
     ipset_node_decref(cache, node1);
@@ -257,7 +257,7 @@ START_TEST(test_bdd_nonterminal_reduced_2)
     ipset_node_id  node =
         ipset_node_cache_nonterminal(cache, 0, n_false, n_false);
 
-    fail_unless(node == n_false,
+    ck_assert_msg(node == n_false,
                 "Nonterminal node isn't reduced");
 
     ipset_node_decref(cache, node);
@@ -289,14 +289,14 @@ START_TEST(test_bdd_evaluate_1)
 
     uint8_t  input1[] = { 0x80 }; /* { TRUE } */
     bool  expected1 = false;
-    fail_unless(ipset_node_evaluate
+    ck_assert_msg(ipset_node_evaluate
                 (cache, node, ipset_bit_array_assignment, input1)
                 == expected1,
                 "BDD evaluates to wrong value");
 
     uint8_t  input2[] = { 0x00 }; /* { FALSE } */
     bool  expected2 = true;
-    fail_unless(ipset_node_evaluate
+    ck_assert_msg(ipset_node_evaluate
                 (cache, node, ipset_bit_array_assignment, input2)
                 == expected2,
                 "BDD evaluates to wrong value");
@@ -328,28 +328,28 @@ START_TEST(test_bdd_evaluate_2)
 
     bool  input1[] = { true, true };
     bool  expected1 = false;
-    fail_unless(ipset_node_evaluate
+    ck_assert_msg(ipset_node_evaluate
                 (cache, node, ipset_bool_array_assignment, input1)
                 == expected1,
                 "BDD evaluates to wrong value");
 
     bool  input2[] = { true, false };
     bool  expected2 = false;
-    fail_unless(ipset_node_evaluate
+    ck_assert_msg(ipset_node_evaluate
                 (cache, node, ipset_bool_array_assignment, input2)
                 == expected2,
                 "BDD evaluates to wrong value");
 
     bool  input3[] = { false, true };
     bool  expected3 = true;
-    fail_unless(ipset_node_evaluate
+    ck_assert_msg(ipset_node_evaluate
                 (cache, node, ipset_bool_array_assignment, input3)
                 == expected3,
                 "BDD evaluates to wrong value");
 
     bool  input4[] = { false, false };
     bool  expected4 = false;
-    fail_unless(ipset_node_evaluate
+    ck_assert_msg(ipset_node_evaluate
                 (cache, node, ipset_bool_array_assignment, input4)
                 == expected4,
                 "BDD evaluates to wrong value");
@@ -385,7 +385,7 @@ START_TEST(test_bdd_insert_reduced_1)
         (cache, n_false1, ipset_bool_array_assignment, elem, 2, true);
 
     /* Verify that we get the same physical node both times. */
-    fail_unless(node0 == node1,
+    ck_assert_msg(node0 == node1,
                 "Insert result isn't reduced");
 
     ipset_node_decref(cache, n_false0);
@@ -415,28 +415,28 @@ START_TEST(test_bdd_insert_evaluate_1)
 
     bool  input1[] = { true, true };
     bool  expected1 = true;
-    fail_unless(ipset_node_evaluate
+    ck_assert_msg(ipset_node_evaluate
                 (cache, node, ipset_bool_array_assignment, input1)
                 == expected1,
                 "BDD evaluates to wrong value");
 
     bool  input2[] = { true, false };
     bool  expected2 = false;
-    fail_unless(ipset_node_evaluate
+    ck_assert_msg(ipset_node_evaluate
                 (cache, node, ipset_bool_array_assignment, input2)
                 == expected2,
                 "BDD evaluates to wrong value");
 
     bool  input3[] = { false, true };
     bool  expected3 = false;
-    fail_unless(ipset_node_evaluate
+    ck_assert_msg(ipset_node_evaluate
                 (cache, node, ipset_bool_array_assignment, input3)
                 == expected3,
                 "BDD evaluates to wrong value");
 
     bool  input4[] = { false, false };
     bool  expected4 = false;
-    fail_unless(ipset_node_evaluate
+    ck_assert_msg(ipset_node_evaluate
                 (cache, node, ipset_bool_array_assignment, input4)
                 == expected4,
                 "BDD evaluates to wrong value");
@@ -477,10 +477,10 @@ START_TEST(test_bdd_size_1)
 
     /* And verify how big it is. */
 
-    fail_unless(ipset_node_reachable_count(cache, node) == 3u,
+    ck_assert_msg(ipset_node_reachable_count(cache, node) == 3u,
                 "BDD has wrong number of nodes");
 
-    fail_unless(ipset_node_memory_size(cache, node) ==
+    ck_assert_msg(ipset_node_memory_size(cache, node) ==
                 3u * sizeof(struct ipset_node),
                 "BDD takes up wrong amount of space");
 
@@ -512,7 +512,7 @@ START_TEST(test_bdd_save_1)
     struct cork_stream_consumer  *stream =
         cork_buffer_to_stream_consumer(&buf);
 
-    fail_unless(ipset_node_cache_save(stream, cache, node) == 0,
+    ck_assert_msg(ipset_node_cache_save(stream, cache, node) == 0,
                 "Cannot serialize BDD");
 
     const char  *raw_expected =
@@ -524,12 +524,12 @@ START_TEST(test_bdd_save_1)
         ;
     const size_t  expected_length = 24;
 
-    fail_unless(expected_length == buf.size,
+    ck_assert_msg(expected_length == buf.size,
                 "Serialized BDD has wrong length "
                 "(expected %zu, got %zu)",
                 expected_length, buf.size);
 
-    fail_unless(memcmp(raw_expected, buf.buf, expected_length) == 0,
+    ck_assert_msg(memcmp(raw_expected, buf.buf, expected_length) == 0,
                 "Serialized BDD has incorrect data");
 
     cork_stream_consumer_free(stream);
@@ -568,7 +568,7 @@ START_TEST(test_bdd_save_2)
     struct cork_stream_consumer  *stream =
         cork_buffer_to_stream_consumer(&buf);
 
-    fail_unless(ipset_node_cache_save(stream, cache, node) == 0,
+    ck_assert_msg(ipset_node_cache_save(stream, cache, node) == 0,
                 "Cannot serialize BDD");
 
     const char  *raw_expected =
@@ -591,12 +591,12 @@ START_TEST(test_bdd_save_2)
         ;
     const size_t  expected_length = 47;
 
-    fail_unless(expected_length == buf.size,
+    ck_assert_msg(expected_length == buf.size,
                 "Serialized BDD has wrong length "
                 "(expected %zu, got %zu)",
                 expected_length, buf.size);
 
-    fail_unless(memcmp(raw_expected, buf.buf, expected_length) == 0,
+    ck_assert_msg(memcmp(raw_expected, buf.buf, expected_length) == 0,
                 "Serialized BDD has incorrect data");
 
     cork_stream_consumer_free(stream);
@@ -637,10 +637,10 @@ START_TEST(test_bdd_load_1)
     fseek(temp_file->stream, 0, SEEK_SET);
 
     ipset_node_id  read = ipset_node_cache_load(temp_file->stream, cache);
-    fail_if(cork_error_occurred(),
+    ck_assert_msg(!cork_error_occurred(),
             "Error reading BDD from stream");
 
-    fail_unless(read == node,
+    ck_assert_msg(read == node,
                 "BDD from stream doesn't match expected");
 
     temp_file_free(temp_file);
@@ -705,10 +705,10 @@ START_TEST(test_bdd_load_2)
     fseek(temp_file->stream, 0, SEEK_SET);
 
     ipset_node_id  read = ipset_node_cache_load(temp_file->stream, cache);
-    fail_if(cork_error_occurred(),
+    ck_assert_msg(!cork_error_occurred(),
             "Error reading BDD from stream");
 
-    fail_unless(read == node,
+    ck_assert_msg(read == node,
                 "BDD from stream doesn't match expected");
 
     temp_file_free(temp_file);
@@ -746,27 +746,27 @@ START_TEST(test_bdd_iterate_1)
     struct ipset_assignment  *expected = ipset_assignment_new();
     struct ipset_bdd_iterator  *it = ipset_node_iterate(cache, node);
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "Iterator should not be empty");
     ipset_assignment_clear(expected);
     ipset_assignment_set(expected, 0, IPSET_FALSE);
-    fail_unless(ipset_assignment_equal(expected, it->assignment),
+    ck_assert_msg(ipset_assignment_equal(expected, it->assignment),
                 "Iterator assignment 0 doesn't match");
-    fail_unless(true == it->value,
+    ck_assert_msg(true == it->value,
                 "Iterator value 0 doesn't match");
 
     ipset_bdd_iterator_advance(it);
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "Iterator should have more than 1 element");
     ipset_assignment_clear(expected);
     ipset_assignment_set(expected, 0, IPSET_TRUE);
-    fail_unless(ipset_assignment_equal(expected, it->assignment),
+    ck_assert_msg(ipset_assignment_equal(expected, it->assignment),
                 "Iterator assignment 1 doesn't match");
-    fail_unless(false == it->value,
+    ck_assert_msg(false == it->value,
                 "Iterator value 1 doesn't match (%u)", it->value);
 
     ipset_bdd_iterator_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "Iterator should have 2 elements");
 
     ipset_assignment_free(expected);
@@ -796,39 +796,39 @@ START_TEST(test_bdd_iterate_2)
     struct ipset_assignment  *expected = ipset_assignment_new();
     struct ipset_bdd_iterator  *it = ipset_node_iterate(cache, node);
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "Iterator should not be empty");
     ipset_assignment_clear(expected);
     ipset_assignment_set(expected, 0, IPSET_FALSE);
     ipset_assignment_set(expected, 1, IPSET_FALSE);
-    fail_unless(ipset_assignment_equal(expected, it->assignment),
+    ck_assert_msg(ipset_assignment_equal(expected, it->assignment),
                 "Iterator assignment 0 doesn't match");
-    fail_unless(false == it->value,
+    ck_assert_msg(false == it->value,
                 "Iterator value 0 doesn't match");
 
     ipset_bdd_iterator_advance(it);
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "Iterator should have more than 1 element");
     ipset_assignment_clear(expected);
     ipset_assignment_set(expected, 0, IPSET_FALSE);
     ipset_assignment_set(expected, 1, IPSET_TRUE);
-    fail_unless(ipset_assignment_equal(expected, it->assignment),
+    ck_assert_msg(ipset_assignment_equal(expected, it->assignment),
                 "Iterator assignment 1 doesn't match");
-    fail_unless(true == it->value,
+    ck_assert_msg(true == it->value,
                 "Iterator value 1 doesn't match (%u)", it->value);
 
     ipset_bdd_iterator_advance(it);
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "Iterator should have more than 2 elements");
     ipset_assignment_clear(expected);
     ipset_assignment_set(expected, 0, IPSET_TRUE);
-    fail_unless(ipset_assignment_equal(expected, it->assignment),
+    ck_assert_msg(ipset_assignment_equal(expected, it->assignment),
                 "Iterator assignment 2 doesn't match");
-    fail_unless(false == it->value,
+    ck_assert_msg(false == it->value,
                 "Iterator value 2 doesn't match (%u)", it->value);
 
     ipset_bdd_iterator_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "Iterator should have 3 elements");
 
     ipset_assignment_free(expected);
diff --git a/tests/test-ipmap.c b/tests/test-ipmap.c
index 0e600b7..3035995 100644
--- a/tests/test-ipmap.c
+++ b/tests/test-ipmap.c
@@ -72,17 +72,17 @@ test_round_trip(struct ip_map *map)
     struct temp_file  *temp_file = temp_file_new();
     temp_file_open_stream(temp_file);
 
-    fail_unless(ipmap_save(temp_file->stream, map) == 0,
+    ck_assert_msg(ipmap_save(temp_file->stream, map) == 0,
                 "Could not save map");
 
     fflush(temp_file->stream);
     fseek(temp_file->stream, 0, SEEK_SET);
 
     read_map = ipmap_load(temp_file->stream);
-    fail_if(read_map == NULL,
+    ck_assert_msg(!(read_map == NULL),
             "Could not read map");
 
-    fail_unless(ipmap_is_equal(map, read_map),
+    ck_assert_msg(ipmap_is_equal(map, read_map),
                 "Map not same after saving/loading");
 
     temp_file_free(temp_file);
@@ -100,7 +100,7 @@ START_TEST(test_map_starts_empty)
     struct ip_map  map;
 
     ipmap_init(&map, 0);
-    fail_unless(ipmap_is_empty(&map),
+    ck_assert_msg(ipmap_is_empty(&map),
                 "Map should start empty");
     ipmap_done(&map);
 }
@@ -113,7 +113,7 @@ START_TEST(test_empty_maps_equal)
 
     ipmap_init(&map1, 0);
     ipmap_init(&map2, 0);
-    fail_unless(ipmap_is_equal(&map1, &map2),
+    ck_assert_msg(ipmap_is_equal(&map1, &map2),
                 "Empty maps should be equal");
     ipmap_done(&map1);
     ipmap_done(&map2);
@@ -127,7 +127,7 @@ START_TEST(test_different_defaults_unequal)
 
     ipmap_init(&map1, 0);
     ipmap_init(&map2, 1);
-    fail_if(ipmap_is_equal(&map1, &map2),
+    ck_assert_msg(!ipmap_is_equal(&map1, &map2),
             "Empty maps with different defaults "
             "should be unequal");
     ipmap_done(&map1);
@@ -171,7 +171,7 @@ START_TEST(test_ipv4_insert_01)
     ipmap_init(&map, 0);
     cork_ipv4_init(&addr, "192.168.1.100");
     ipmap_ipv4_set(&map, &addr, 1);
-    fail_unless(ipmap_ipv4_get(&map, &addr) == 1,
+    ck_assert_msg(ipmap_ipv4_get(&map, &addr) == 1,
                 "Element should be present");
     ipmap_done(&map);
 }
@@ -187,7 +187,7 @@ START_TEST(test_ipv4_insert_02)
     cork_ipv4_init(&addr, "192.168.1.100");
     ipmap_ipv4_set(&map, &addr, 1);
     cork_ipv4_init(&addr, "192.168.1.101");
-    fail_unless(ipmap_ipv4_get(&map, &addr) == 0,
+    ck_assert_msg(ipmap_ipv4_get(&map, &addr) == 0,
                 "Element should not be present");
     ipmap_done(&map);
 }
@@ -203,7 +203,7 @@ START_TEST(test_ipv4_insert_03)
     cork_ipv4_init(&addr, "192.168.1.100");
     ipmap_ipv4_set(&map, &addr, 1);
     cork_ipv4_init(&addr, "192.168.2.100");
-    fail_unless(ipmap_ipv4_get(&map, &addr) == 0,
+    ck_assert_msg(ipmap_ipv4_get(&map, &addr) == 0,
                 "Element should not be present");
     ipmap_done(&map);
 }
@@ -218,7 +218,7 @@ START_TEST(test_ipv4_insert_network_01)
     ipmap_init(&map, 0);
     cork_ipv4_init(&addr, "192.168.1.100");
     ipmap_ipv4_set_network(&map, &addr, 24, 1);
-    fail_unless(ipmap_ipv4_get(&map, &addr) == 1,
+    ck_assert_msg(ipmap_ipv4_get(&map, &addr) == 1,
                 "Element should be present");
     ipmap_done(&map);
 }
@@ -234,7 +234,7 @@ START_TEST(test_ipv4_insert_network_02)
     cork_ipv4_init(&addr, "192.168.1.100");
     ipmap_ipv4_set_network(&map, &addr, 24, 1);
     cork_ipv4_init(&addr, "192.168.1.101");
-    fail_unless(ipmap_ipv4_get(&map, &addr) == 1,
+    ck_assert_msg(ipmap_ipv4_get(&map, &addr) == 1,
                 "Element should be present");
     ipmap_done(&map);
 }
@@ -250,7 +250,7 @@ START_TEST(test_ipv4_insert_network_03)
     cork_ipv4_init(&addr, "192.168.1.100");
     ipmap_ipv4_set_network(&map, &addr, 24, 1);
     cork_ipv4_init(&addr, "192.168.2.100");
-    fail_unless(ipmap_ipv4_get(&map, &addr) == 0,
+    ck_assert_msg(ipmap_ipv4_get(&map, &addr) == 0,
                 "Element should not be present");
     ipmap_done(&map);
 }
@@ -267,7 +267,7 @@ START_TEST(test_ipv4_overwrite_01)
     ipmap_ipv4_set_network(&map, &addr, 24, 1);
     cork_ipv4_init(&addr, "192.168.1.100");
     ipmap_ipv4_set(&map, &addr, 0);
-    fail_unless(ipmap_ipv4_get(&map, &addr) == 0,
+    ck_assert_msg(ipmap_ipv4_get(&map, &addr) == 0,
                 "Element should be overwritten");
     ipmap_done(&map);
 }
@@ -284,7 +284,7 @@ START_TEST(test_ipv4_overwrite_02)
     ipmap_ipv4_set_network(&map, &addr, 24, 1);
     cork_ipv4_init(&addr, "192.168.1.100");
     ipmap_ipv4_set(&map, &addr, 2);
-    fail_unless(ipmap_ipv4_get(&map, &addr) == 2,
+    ck_assert_msg(ipmap_ipv4_get(&map, &addr) == 2,
                 "Element should be overwritten");
     ipmap_done(&map);
 }
@@ -299,7 +299,7 @@ START_TEST(test_ipv4_bad_cidr_prefix_01)
     ipmap_init(&map, 0);
     cork_ipv4_init(&addr, "192.168.1.100");
     ipmap_ipv4_set_network(&map, &addr, 33, 1);
-    fail_unless(ipmap_is_empty(&map),
+    ck_assert_msg(ipmap_is_empty(&map),
                 "Bad CIDR prefix shouldn't change map");
     cork_error_clear();
     ipmap_done(&map);
@@ -320,7 +320,7 @@ START_TEST(test_ipv4_equality_1)
     cork_ipv4_init(&addr, "192.168.1.100");
     ipmap_ipv4_set(&map2, &addr, 1);
 
-    fail_unless(ipmap_is_equal(&map1, &map2),
+    ck_assert_msg(ipmap_is_equal(&map1, &map2),
                 "Expected {x} == {x}");
 
     ipmap_done(&map1);
@@ -343,7 +343,7 @@ START_TEST(test_ipv4_equality_2)
     cork_ipv4_init(&addr, "192.168.1.0");
     ipmap_ipv4_set_network(&map2, &addr, 24, 1);
 
-    fail_unless(ipmap_is_equal(&map1, &map2),
+    ck_assert_msg(ipmap_is_equal(&map1, &map2),
                 "Expected {x} == {x}");
 
     ipmap_done(&map1);
@@ -369,7 +369,7 @@ START_TEST(test_ipv4_equality_3)
     cork_ipv4_init(&addr, "192.168.1.0");
     ipmap_ipv4_set_network(&map2, &addr, 24, 1);
 
-    fail_unless(ipmap_is_equal(&map1, &map2),
+    ck_assert_msg(ipmap_is_equal(&map1, &map2),
                 "Expected {x} == {x}");
 
     ipmap_done(&map1);
@@ -390,7 +390,7 @@ START_TEST(test_ipv4_inequality_1)
     ipmap_init(&map2, 0);
     ipmap_ipv4_set_network(&map2, &addr, 24, 1);
 
-    fail_unless(!ipmap_is_equal(&map1, &map2),
+    ck_assert_msg(!ipmap_is_equal(&map1, &map2),
                 "Expected {x} != {x}");
 
     ipmap_done(&map1);
@@ -411,7 +411,7 @@ START_TEST(test_ipv4_inequality_2)
     ipmap_init(&map2, 0);
     ipmap_ipv4_set(&map2, &addr, 2);
 
-    fail_unless(!ipmap_is_equal(&map1, &map2),
+    ck_assert_msg(!ipmap_is_equal(&map1, &map2),
                 "Expected {x} != {x}");
 
     ipmap_done(&map1);
@@ -433,7 +433,7 @@ START_TEST(test_ipv4_memory_size_1)
     expected = 33 * sizeof(struct ipset_node);
     actual = ipmap_memory_size(&map);
 
-    fail_unless(expected == actual,
+    ck_assert_msg(expected == actual,
                 "Expected map to be %zu bytes, got %zu bytes",
                 expected, actual);
 
@@ -455,7 +455,7 @@ START_TEST(test_ipv4_memory_size_2)
     expected = 25 * sizeof(struct ipset_node);
     actual = ipmap_memory_size(&map);
 
-    fail_unless(expected == actual,
+    ck_assert_msg(expected == actual,
                 "Expected map to be %zu bytes, got %zu bytes",
                 expected, actual);
 
@@ -495,7 +495,7 @@ START_TEST(test_ipv6_insert_01)
     ipmap_init(&map, 0);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
     ipmap_ipv6_set(&map, &addr, 1);
-    fail_unless(ipmap_ipv6_get(&map, &addr) == 1,
+    ck_assert_msg(ipmap_ipv6_get(&map, &addr) == 1,
                 "Element should be present");
     ipmap_done(&map);
 }
@@ -511,7 +511,7 @@ START_TEST(test_ipv6_insert_02)
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
     ipmap_ipv6_set(&map, &addr, 1);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e2");
-    fail_unless(ipmap_ipv6_get(&map, &addr) == 0,
+    ck_assert_msg(ipmap_ipv6_get(&map, &addr) == 0,
                 "Element should not be present");
     ipmap_done(&map);
 }
@@ -527,7 +527,7 @@ START_TEST(test_ipv6_insert_03)
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
     ipmap_ipv6_set(&map, &addr, 1);
     cork_ipv6_init(&addr, "fe80:1::21e:c2ff:fe9f:e8e1");
-    fail_unless(ipmap_ipv6_get(&map, &addr) == 0,
+    ck_assert_msg(ipmap_ipv6_get(&map, &addr) == 0,
                 "Element should not be present");
     ipmap_done(&map);
 }
@@ -542,7 +542,7 @@ START_TEST(test_ipv6_insert_network_01)
     ipmap_init(&map, 0);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
     ipmap_ipv6_set_network(&map, &addr, 32, 1);
-    fail_unless(ipmap_ipv6_get(&map, &addr) == 1,
+    ck_assert_msg(ipmap_ipv6_get(&map, &addr) == 1,
                 "Element should be present");
     ipmap_done(&map);
 }
@@ -558,7 +558,7 @@ START_TEST(test_ipv6_insert_network_02)
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
     ipmap_ipv6_set_network(&map, &addr, 32, 1);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e2");
-    fail_unless(ipmap_ipv6_get(&map, &addr) == 1,
+    ck_assert_msg(ipmap_ipv6_get(&map, &addr) == 1,
                 "Element should be present");
     ipmap_done(&map);
 }
@@ -574,7 +574,7 @@ START_TEST(test_ipv6_insert_network_03)
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
     ipmap_ipv6_set_network(&map, &addr, 32, 1);
     cork_ipv6_init(&addr, "fe80:1::21e:c2ff:fe9f:e8e1");
-    fail_unless(ipmap_ipv6_get(&map, &addr) == 0,
+    ck_assert_msg(ipmap_ipv6_get(&map, &addr) == 0,
                 "Element should not be present");
     ipmap_done(&map);
 }
@@ -589,7 +589,7 @@ START_TEST(test_ipv6_bad_cidr_prefix_01)
     ipmap_init(&map, 0);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
     ipmap_ipv6_set_network(&map, &addr, 129, 1);
-    fail_unless(ipmap_is_empty(&map),
+    ck_assert_msg(ipmap_is_empty(&map),
                 "Bad CIDR prefix shouldn't change map");
     cork_error_clear();
     ipmap_done(&map);
@@ -609,7 +609,7 @@ START_TEST(test_ipv6_equality_1)
     ipmap_init(&map2, 0);
     ipmap_ipv6_set(&map2, &addr, 1);
 
-    fail_unless(ipmap_is_equal(&map1, &map2),
+    ck_assert_msg(ipmap_is_equal(&map1, &map2),
                 "Expected {x} == {x}");
 
     ipmap_done(&map1);
@@ -632,7 +632,7 @@ START_TEST(test_ipv6_equality_2)
     cork_ipv6_init(&addr, "fe80::");
     ipmap_ipv6_set_network(&map2, &addr, 64, 1);
 
-    fail_unless(ipmap_is_equal(&map1, &map2),
+    ck_assert_msg(ipmap_is_equal(&map1, &map2),
                 "Expected {x} == {x}");
 
     ipmap_done(&map1);
@@ -658,7 +658,7 @@ START_TEST(test_ipv6_equality_3)
     cork_ipv6_init(&addr, "fe80::1:0");
     ipmap_ipv6_set_network(&map2, &addr, 112, 1);
 
-    fail_unless(ipmap_is_equal(&map1, &map2),
+    ck_assert_msg(ipmap_is_equal(&map1, &map2),
                 "Expected {x} == {x}");
 
     ipmap_done(&map1);
@@ -679,7 +679,7 @@ START_TEST(test_ipv6_inequality_1)
     ipmap_init(&map2, 0);
     ipmap_ipv6_set_network(&map2, &addr, 32, 1);
 
-    fail_unless(!ipmap_is_equal(&map1, &map2),
+    ck_assert_msg(!ipmap_is_equal(&map1, &map2),
                 "Expected {x} != {x}");
 
     ipmap_done(&map1);
@@ -700,7 +700,7 @@ START_TEST(test_ipv6_inequality_2)
     ipmap_init(&map2, 0);
     ipmap_ipv6_set(&map2, &addr, 2);
 
-    fail_unless(!ipmap_is_equal(&map1, &map2),
+    ck_assert_msg(!ipmap_is_equal(&map1, &map2),
                 "Expected {x} != {x}");
 
     ipmap_done(&map1);
@@ -722,7 +722,7 @@ START_TEST(test_ipv6_memory_size_1)
     expected = 129 * sizeof(struct ipset_node);
     actual = ipmap_memory_size(&map);
 
-    fail_unless(expected == actual,
+    ck_assert_msg(expected == actual,
                 "Expected map to be %zu bytes, got %zu bytes",
                 expected, actual);
 
@@ -744,7 +744,7 @@ START_TEST(test_ipv6_memory_size_2)
     expected = 33 * sizeof(struct ipset_node);
     actual = ipmap_memory_size(&map);
 
-    fail_unless(expected == actual,
+    ck_assert_msg(expected == actual,
                 "Expected map to be %zu bytes, got %zu bytes",
                 expected, actual);
 
diff --git a/tests/test-ipset.c b/tests/test-ipset.c
index 0737e2e..1cf2d16 100644
--- a/tests/test-ipset.c
+++ b/tests/test-ipset.c
@@ -72,17 +72,17 @@ test_round_trip(struct ip_set *set)
     struct temp_file  *temp_file = temp_file_new();
     temp_file_open_stream(temp_file);
 
-    fail_unless(ipset_save(temp_file->stream, set) == 0,
+    ck_assert_msg(ipset_save(temp_file->stream, set) == 0,
                 "Could not save set");
 
     fflush(temp_file->stream);
     fseek(temp_file->stream, 0, SEEK_SET);
 
     read_set = ipset_load(temp_file->stream);
-    fail_if(read_set == NULL,
+    ck_assert_msg(!(read_set == NULL),
             "Could not read set");
 
-    fail_unless(ipset_is_equal(set, read_set),
+    ck_assert_msg(ipset_is_equal(set, read_set),
                 "Set not same after saving/loading");
 
     temp_file_free(temp_file);
@@ -100,7 +100,7 @@ START_TEST(test_set_starts_empty)
     struct ip_set  set;
 
     ipset_init(&set);
-    fail_unless(ipset_is_empty(&set),
+    ck_assert_msg(ipset_is_empty(&set),
                 "Set should start empty");
     ipset_done(&set);
 }
@@ -113,7 +113,7 @@ START_TEST(test_empty_sets_equal)
 
     ipset_init(&set1);
     ipset_init(&set2);
-    fail_unless(ipset_is_equal(&set1, &set2),
+    ck_assert_msg(ipset_is_equal(&set1, &set2),
                 "Empty sets should be equal");
     ipset_done(&set1);
     ipset_done(&set2);
@@ -144,9 +144,9 @@ START_TEST(test_ipv4_insert_01)
 
     ipset_init(&set);
     cork_ipv4_init(&addr, "192.168.1.100");
-    fail_if(ipset_ipv4_add(&set, &addr),
+    ck_assert_msg(!ipset_ipv4_add(&set, &addr),
             "Element should not be present");
-    fail_unless(ipset_ipv4_add(&set, &addr),
+    ck_assert_msg(ipset_ipv4_add(&set, &addr),
                 "Element should be present");
     ipset_done(&set);
 }
@@ -160,11 +160,11 @@ START_TEST(test_ipv4_remove_01)
 
     ipset_init(&set);
     cork_ipv4_init(&addr, "192.168.1.100");
-    fail_if(ipset_ipv4_add(&set, &addr),
+    ck_assert_msg(!ipset_ipv4_add(&set, &addr),
             "Element should not be present");
-    fail_if(ipset_ipv4_remove(&set, &addr),
+    ck_assert_msg(!ipset_ipv4_remove(&set, &addr),
             "Element should be present");
-    fail_unless(ipset_ipv4_remove(&set, &addr),
+    ck_assert_msg(ipset_ipv4_remove(&set, &addr),
                 "Element should not be present");
     ipset_done(&set);
 }
@@ -178,9 +178,9 @@ START_TEST(test_ipv4_insert_network_01)
 
     ipset_init(&set);
     cork_ipv4_init(&addr, "192.168.1.100");
-    fail_if(ipset_ipv4_add_network(&set, &addr, 24),
+    ck_assert_msg(!ipset_ipv4_add_network(&set, &addr, 24),
             "Element should not be present");
-    fail_unless(ipset_ipv4_add_network(&set, &addr, 24),
+    ck_assert_msg(ipset_ipv4_add_network(&set, &addr, 24),
                 "Element should be present");
     ipset_done(&set);
 }
@@ -194,11 +194,11 @@ START_TEST(test_ipv4_remove_network_01)
 
     ipset_init(&set);
     cork_ipv4_init(&addr, "192.168.1.100");
-    fail_if(ipset_ipv4_add_network(&set, &addr, 24),
+    ck_assert_msg(!ipset_ipv4_add_network(&set, &addr, 24),
             "Element should not be present");
-    fail_if(ipset_ipv4_remove_network(&set, &addr, 24),
+    ck_assert_msg(!ipset_ipv4_remove_network(&set, &addr, 24),
             "Element should be present");
-    fail_unless(ipset_ipv4_remove_network(&set, &addr, 24),
+    ck_assert_msg(ipset_ipv4_remove_network(&set, &addr, 24),
                 "Element should not be present");
     ipset_done(&set);
 }
@@ -213,7 +213,7 @@ START_TEST(test_ipv4_bad_cidr_prefix_01)
     ipset_init(&set);
     cork_ipv4_init(&addr, "192.168.1.100");
     ipset_ipv4_add_network(&set, &addr, 33);
-    fail_unless(ipset_is_empty(&set),
+    ck_assert_msg(ipset_is_empty(&set),
                 "Bad CIDR prefix shouldn't change set");
     cork_error_clear();
     ipset_done(&set);
@@ -228,9 +228,9 @@ START_TEST(test_ipv4_contains_01)
 
     ipset_init(&set);
     cork_ipv4_init(&addr, "192.168.1.100");
-    fail_if(ipset_ipv4_add(&set, &addr),
+    ck_assert_msg(!ipset_ipv4_add(&set, &addr),
             "Element should not be present");
-    fail_unless(ipset_contains_ipv4(&set, &addr),
+    ck_assert_msg(ipset_contains_ipv4(&set, &addr),
                 "Element should be present");
     ipset_done(&set);
 }
@@ -246,9 +246,9 @@ START_TEST(test_ipv4_contains_02)
     ipset_init(&set);
     cork_ipv4_init(&addr, "192.168.1.100");
     cork_ip_from_ipv4(&ip, &addr);
-    fail_if(ipset_ipv4_add(&set, &addr),
+    ck_assert_msg(!ipset_ipv4_add(&set, &addr),
             "Element should not be present");
-    fail_unless(ipset_contains_ip(&set, &ip),
+    ck_assert_msg(ipset_contains_ip(&set, &ip),
                 "Element should be present");
     ipset_done(&set);
 }
@@ -262,9 +262,9 @@ START_TEST(test_ipv4_network_contains_01)
 
     ipset_init(&set);
     cork_ipv4_init(&addr, "192.168.1.100");
-    fail_if(ipset_ipv4_add_network(&set, &addr, 24),
+    ck_assert_msg(!ipset_ipv4_add_network(&set, &addr, 24),
             "Element should not be present");
-    fail_unless(ipset_contains_ipv4(&set, &addr),
+    ck_assert_msg(ipset_contains_ipv4(&set, &addr),
                 "Element should be present");
     ipset_done(&set);
 }
@@ -283,7 +283,7 @@ START_TEST(test_ipv4_equality_1)
     ipset_init(&set2);
     ipset_ipv4_add(&set2, &addr);
 
-    fail_unless(ipset_is_equal(&set1, &set2),
+    ck_assert_msg(ipset_is_equal(&set1, &set2),
                 "Expected {x} == {x}");
 
     ipset_done(&set1);
@@ -305,7 +305,7 @@ START_TEST(test_ipv4_equality_2)
     ipset_init(&set2);
     ipset_ipv4_add_network(&set2, &addr, 24);
 
-    fail_unless(ipset_is_equal(&set1, &set2),
+    ck_assert_msg(ipset_is_equal(&set1, &set2),
                 "Expected {x} == {x}");
 
     ipset_done(&set1);
@@ -332,7 +332,7 @@ START_TEST(test_ipv4_equality_3)
     cork_ipv4_init(&addr, "192.168.2.0");
     ipset_ipv4_add(&set2, &addr);
 
-    fail_unless(ipset_is_equal(&set1, &set2),
+    ck_assert_msg(ipset_is_equal(&set1, &set2),
                 "Expected {x} == {x}");
 
     ipset_done(&set1);
@@ -353,7 +353,7 @@ START_TEST(test_ipv4_inequality_1)
     ipset_init(&set2);
     ipset_ipv4_add_network(&set2, &addr, 24);
 
-    fail_unless(!ipset_is_equal(&set1, &set2),
+    ck_assert_msg(!ipset_is_equal(&set1, &set2),
                 "Expected {x} != {x}");
 
     ipset_done(&set1);
@@ -375,7 +375,7 @@ START_TEST(test_ipv4_memory_size_1)
     expected = 33 * sizeof(struct ipset_node);
     actual = ipset_memory_size(&set);
 
-    fail_unless(expected == actual,
+    ck_assert_msg(expected == actual,
                 "Expected set to be %zu bytes, got %zu bytes",
                 expected, actual);
 
@@ -397,7 +397,7 @@ START_TEST(test_ipv4_memory_size_2)
     expected = 25 * sizeof(struct ipset_node);
     actual = ipset_memory_size(&set);
 
-    fail_unless(expected == actual,
+    ck_assert_msg(expected == actual,
                 "Expected set to be %zu bytes, got %zu bytes",
                 expected, actual);
 
@@ -464,9 +464,9 @@ START_TEST(test_ipv6_insert_01)
 
     ipset_init(&set);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
-    fail_if(ipset_ipv6_add(&set, &addr),
+    ck_assert_msg(!ipset_ipv6_add(&set, &addr),
             "Element should not be present");
-    fail_unless(ipset_ipv6_add(&set, &addr),
+    ck_assert_msg(ipset_ipv6_add(&set, &addr),
                 "Element should be present");
     ipset_done(&set);
 }
@@ -480,11 +480,11 @@ START_TEST(test_ipv6_remove_01)
 
     ipset_init(&set);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
-    fail_if(ipset_ipv6_add(&set, &addr),
+    ck_assert_msg(!ipset_ipv6_add(&set, &addr),
             "Element should not be present");
-    fail_if(ipset_ipv6_remove(&set, &addr),
+    ck_assert_msg(!ipset_ipv6_remove(&set, &addr),
             "Element should be present");
-    fail_unless(ipset_ipv6_remove(&set, &addr),
+    ck_assert_msg(ipset_ipv6_remove(&set, &addr),
                 "Element should not be present");
     ipset_done(&set);
 }
@@ -498,9 +498,9 @@ START_TEST(test_ipv6_insert_network_01)
 
     ipset_init(&set);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
-    fail_if(ipset_ipv6_add_network(&set, &addr, 32),
+    ck_assert_msg(!ipset_ipv6_add_network(&set, &addr, 32),
             "Element should not be present");
-    fail_unless(ipset_ipv6_add_network(&set, &addr, 32),
+    ck_assert_msg(ipset_ipv6_add_network(&set, &addr, 32),
                 "Element should be present");
     ipset_done(&set);
 }
@@ -514,11 +514,11 @@ START_TEST(test_ipv6_remove_network_01)
 
     ipset_init(&set);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
-    fail_if(ipset_ipv6_add_network(&set, &addr, 32),
+    ck_assert_msg(!ipset_ipv6_add_network(&set, &addr, 32),
             "ELement should not be present");
-    fail_if(ipset_ipv6_remove_network(&set, &addr, 32),
+    ck_assert_msg(!ipset_ipv6_remove_network(&set, &addr, 32),
             "Element should be present");
-    fail_unless(ipset_ipv6_remove_network(&set, &addr, 32),
+    ck_assert_msg(ipset_ipv6_remove_network(&set, &addr, 32),
                 "Element should not be present");
     ipset_done(&set);
 }
@@ -533,7 +533,7 @@ START_TEST(test_ipv6_bad_cidr_prefix_01)
     ipset_init(&set);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
     ipset_ipv6_add_network(&set, &addr, 129);
-    fail_unless(ipset_is_empty(&set),
+    ck_assert_msg(ipset_is_empty(&set),
                 "Bad CIDR prefix shouldn't change set");
     cork_error_clear();
     ipset_done(&set);
@@ -548,9 +548,9 @@ START_TEST(test_ipv6_contains_01)
 
     ipset_init(&set);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
-    fail_if(ipset_ipv6_add(&set, &addr),
+    ck_assert_msg(!ipset_ipv6_add(&set, &addr),
             "Element should not be present");
-    fail_unless(ipset_contains_ipv6(&set, &addr),
+    ck_assert_msg(ipset_contains_ipv6(&set, &addr),
                 "Element should be present");
     ipset_done(&set);
 }
@@ -566,9 +566,9 @@ START_TEST(test_ipv6_contains_02)
     ipset_init(&set);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
     cork_ip_from_ipv6(&ip, &addr);
-    fail_if(ipset_ipv6_add(&set, &addr),
+    ck_assert_msg(!ipset_ipv6_add(&set, &addr),
             "Element should not be present");
-    fail_unless(ipset_contains_ip(&set, &ip),
+    ck_assert_msg(ipset_contains_ip(&set, &ip),
                 "Element should be present");
     ipset_done(&set);
 }
@@ -582,9 +582,9 @@ START_TEST(test_ipv6_network_contains_01)
 
     ipset_init(&set);
     cork_ipv6_init(&addr, "fe80::21e:c2ff:fe9f:e8e1");
-    fail_if(ipset_ipv6_add_network(&set, &addr, 32),
+    ck_assert_msg(!ipset_ipv6_add_network(&set, &addr, 32),
             "Element should not be present");
-    fail_unless(ipset_contains_ipv6(&set, &addr),
+    ck_assert_msg(ipset_contains_ipv6(&set, &addr),
                 "Element should be present");
     ipset_done(&set);
 }
@@ -603,7 +603,7 @@ START_TEST(test_ipv6_equality_1)
     ipset_init(&set2);
     ipset_ipv6_add(&set2, &addr);
 
-    fail_unless(ipset_is_equal(&set1, &set2),
+    ck_assert_msg(ipset_is_equal(&set1, &set2),
                 "Expected {x} == {x}");
 
     ipset_done(&set1);
@@ -625,7 +625,7 @@ START_TEST(test_ipv6_equality_2)
     ipset_init(&set2);
     ipset_ipv6_add_network(&set2, &addr, 64);
 
-    fail_unless(ipset_is_equal(&set1, &set2),
+    ck_assert_msg(ipset_is_equal(&set1, &set2),
                 "Expected {x} == {x}");
 
     ipset_done(&set1);
@@ -652,7 +652,7 @@ START_TEST(test_ipv6_equality_3)
     cork_ipv6_init(&addr, "fe80:1::");
     ipset_ipv6_add(&set2, &addr);
 
-    fail_unless(ipset_is_equal(&set1, &set2),
+    ck_assert_msg(ipset_is_equal(&set1, &set2),
                 "Expected {x} == {x}");
 
     ipset_done(&set1);
@@ -673,7 +673,7 @@ START_TEST(test_ipv6_inequality_1)
     ipset_init(&set2);
     ipset_ipv6_add_network(&set2, &addr, 32);
 
-    fail_unless(!ipset_is_equal(&set1, &set2),
+    ck_assert_msg(!ipset_is_equal(&set1, &set2),
                 "Expected {x} != {x}");
 
     ipset_done(&set1);
@@ -695,7 +695,7 @@ START_TEST(test_ipv6_memory_size_1)
     expected = 129 * sizeof(struct ipset_node);
     actual = ipset_memory_size(&set);
 
-    fail_unless(expected == actual,
+    ck_assert_msg(expected == actual,
                 "Expected set to be %zu bytes, got %zu bytes",
                 expected, actual);
 
@@ -717,7 +717,7 @@ START_TEST(test_ipv6_memory_size_2)
     expected = 25 * sizeof(struct ipset_node);
     actual = ipset_memory_size(&set);
 
-    fail_unless(expected == actual,
+    ck_assert_msg(expected == actual,
                 "Expected set to be %zu bytes, got %zu bytes",
                 expected, actual);
 
diff --git a/tests/test-iterator.c b/tests/test-iterator.c
index c1aea7f..77240a3 100644
--- a/tests/test-iterator.c
+++ b/tests/test-iterator.c
@@ -29,9 +29,9 @@ START_TEST(test_iterate_empty)
     struct ip_set  set;
     ipset_init(&set);
     struct ipset_iterator  *it = ipset_iterate(&set, true);
-    fail_if(it == NULL,
+    ck_assert_msg(!(it == NULL),
             "IP set iterator is NULL");
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "IP set should be empty");
     ipset_iterator_free(it);
     ipset_done(&set);
@@ -47,22 +47,22 @@ START_TEST(test_ipv4_iterate_01)
     struct cork_ip  ip1;
     cork_ip_init(&ip1, "192.168.0.1");
 
-    fail_if(ipset_ip_add(&set, &ip1),
+    ck_assert_msg(!ipset_ip_add(&set, &ip1),
             "Element should not be present");
 
     struct ipset_iterator  *it = ipset_iterate(&set, true);
-    fail_if(it == NULL,
+    ck_assert_msg(!(it == NULL),
             "IP set iterator is NULL");
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "IP set shouldn't be empty");
-    fail_unless(cork_ip_equal(&ip1, &it->addr),
+    ck_assert_msg(cork_ip_equal(&ip1, &it->addr),
                 "IP address 0 doesn't match");
-    fail_unless(it->cidr_prefix == IPV4_BIT_SIZE,
+    ck_assert_msg(it->cidr_prefix == IPV4_BIT_SIZE,
                 "IP CIDR prefix 0 doesn't match");
 
     ipset_iterator_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "IP set should contain 1 element");
 
     ipset_iterator_free(it);
@@ -80,22 +80,22 @@ START_TEST(test_ipv4_iterate_network_01)
     struct cork_ip  ip1;
     cork_ip_init(&ip1, "192.168.0.0");
 
-    fail_if(ipset_ip_add_network(&set, &ip1, 31),
+    ck_assert_msg(!ipset_ip_add_network(&set, &ip1, 31),
             "Element should not be present");
 
     struct ipset_iterator  *it = ipset_iterate_networks(&set, true);
-    fail_if(it == NULL,
+    ck_assert_msg(!(it == NULL),
             "IP set iterator is NULL");
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "IP set shouldn't be empty");
-    fail_unless(cork_ip_equal(&ip1, &it->addr),
+    ck_assert_msg(cork_ip_equal(&ip1, &it->addr),
                 "IP address 0 doesn't match");
-    fail_unless(it->cidr_prefix == 31,
+    ck_assert_msg(it->cidr_prefix == 31,
                 "IP CIDR prefix 0 doesn't match");
 
     ipset_iterator_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "IP set should contain 1 elements");
 
     ipset_iterator_free(it);
@@ -113,22 +113,22 @@ START_TEST(test_ipv4_iterate_network_02)
     struct cork_ip  ip1;
     cork_ip_init(&ip1, "192.168.0.0");
 
-    fail_if(ipset_ip_add_network(&set, &ip1, 16),
+    ck_assert_msg(!ipset_ip_add_network(&set, &ip1, 16),
             "Element should not be present");
 
     struct ipset_iterator  *it = ipset_iterate_networks(&set, true);
-    fail_if(it == NULL,
+    ck_assert_msg(!(it == NULL),
             "IP set iterator is NULL");
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "IP set shouldn't be empty");
-    fail_unless(cork_ip_equal(&ip1, &it->addr),
+    ck_assert_msg(cork_ip_equal(&ip1, &it->addr),
                 "IP address 0 doesn't match");
-    fail_unless(it->cidr_prefix == 16,
+    ck_assert_msg(it->cidr_prefix == 16,
                 "IP CIDR prefix 0 doesn't match");
 
     ipset_iterator_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "IP set should contain 1 elements");
 
     ipset_iterator_free(it);
@@ -154,25 +154,25 @@ START_TEST(test_ipv4_iterate_network_03)
     struct cork_ip  ip2;
     cork_ip_init(&ip2, "192.168.0.1");
 
-    fail_if(ipset_ip_add(&set, &ip1),
+    ck_assert_msg(!ipset_ip_add(&set, &ip1),
             "Element should not be present");
 
-    fail_if(ipset_ip_add(&set, &ip2),
+    ck_assert_msg(!ipset_ip_add(&set, &ip2),
             "Element should not be present");
 
     struct ipset_iterator  *it = ipset_iterate_networks(&set, true);
-    fail_if(it == NULL,
+    ck_assert_msg(!(it == NULL),
             "IP set iterator is NULL");
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "IP set shouldn't be empty");
-    fail_unless(cork_ip_equal(&ip1, &it->addr),
+    ck_assert_msg(cork_ip_equal(&ip1, &it->addr),
                 "IP address 0 doesn't match");
-    fail_unless(it->cidr_prefix == 31,
+    ck_assert_msg(it->cidr_prefix == 31,
                 "IP CIDR prefix 0 doesn't match");
 
     ipset_iterator_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "IP set should contain 1 elements");
 
     ipset_iterator_free(it);
@@ -190,22 +190,22 @@ START_TEST(test_ipv6_iterate_01)
     struct cork_ip  ip1;
     cork_ip_init(&ip1, "fe80::1");
 
-    fail_if(ipset_ip_add(&set, &ip1),
+    ck_assert_msg(!ipset_ip_add(&set, &ip1),
             "Element should not be present");
 
     struct ipset_iterator  *it = ipset_iterate(&set, true);
-    fail_if(it == NULL,
+    ck_assert_msg(!(it == NULL),
             "IP set iterator is NULL");
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "IP set shouldn't be empty");
-    fail_unless(cork_ip_equal(&ip1, &it->addr),
+    ck_assert_msg(cork_ip_equal(&ip1, &it->addr),
                 "IP address 0 doesn't match");
-    fail_unless(it->cidr_prefix == IPV6_BIT_SIZE,
+    ck_assert_msg(it->cidr_prefix == IPV6_BIT_SIZE,
                 "IP CIDR prefix 0 doesn't match");
 
     ipset_iterator_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "IP set should contain 1 element");
 
     ipset_iterator_free(it);
@@ -223,22 +223,22 @@ START_TEST(test_ipv6_iterate_network_01)
     struct cork_ip  ip1;
     cork_ip_init(&ip1, "fe80::");
 
-    fail_if(ipset_ip_add_network(&set, &ip1, 127),
+    ck_assert_msg(!ipset_ip_add_network(&set, &ip1, 127),
             "Element should not be present");
 
     struct ipset_iterator  *it = ipset_iterate_networks(&set, true);
-    fail_if(it == NULL,
+    ck_assert_msg(!(it == NULL),
             "IP set iterator is NULL");
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "IP set shouldn't be empty");
-    fail_unless(cork_ip_equal(&ip1, &it->addr),
+    ck_assert_msg(cork_ip_equal(&ip1, &it->addr),
                 "IP address 0 doesn't match");
-    fail_unless(it->cidr_prefix == 127,
+    ck_assert_msg(it->cidr_prefix == 127,
                 "IP CIDR prefix 0 doesn't match (%u)", it->cidr_prefix);
 
     ipset_iterator_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "IP set should contain 1 element");
 
     ipset_iterator_free(it);
@@ -256,22 +256,22 @@ START_TEST(test_ipv6_iterate_network_02)
     struct cork_ip  ip1;
     cork_ip_init(&ip1, "fe80::");
 
-    fail_if(ipset_ip_add_network(&set, &ip1, 16),
+    ck_assert_msg(!ipset_ip_add_network(&set, &ip1, 16),
             "Element should not be present");
 
     struct ipset_iterator  *it = ipset_iterate_networks(&set, true);
-    fail_if(it == NULL,
+    ck_assert_msg(!(it == NULL),
             "IP set iterator is NULL");
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "IP set shouldn't be empty");
-    fail_unless(cork_ip_equal(&ip1, &it->addr),
+    ck_assert_msg(cork_ip_equal(&ip1, &it->addr),
                 "IP address 0 doesn't match");
-    fail_unless(it->cidr_prefix == 16,
+    ck_assert_msg(it->cidr_prefix == 16,
                 "IP CIDR prefix 0 doesn't match (%u)", it->cidr_prefix);
 
     ipset_iterator_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "IP set should contain 1 element");
 
     ipset_iterator_free(it);
@@ -297,25 +297,25 @@ START_TEST(test_ipv6_iterate_network_03)
     struct cork_ip  ip2;
     cork_ip_init(&ip2, "fe80::1");
 
-    fail_if(ipset_ip_add(&set, &ip1),
+    ck_assert_msg(!ipset_ip_add(&set, &ip1),
             "Element should not be present");
 
-    fail_if(ipset_ip_add(&set, &ip2),
+    ck_assert_msg(!ipset_ip_add(&set, &ip2),
             "Element should not be present");
 
     struct ipset_iterator  *it = ipset_iterate_networks(&set, true);
-    fail_if(it == NULL,
+    ck_assert_msg(!(it == NULL),
             "IP set iterator is NULL");
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "IP set shouldn't be empty");
-    fail_unless(cork_ip_equal(&ip1, &it->addr),
+    ck_assert_msg(cork_ip_equal(&ip1, &it->addr),
                 "IP address 0 doesn't match");
-    fail_unless(it->cidr_prefix == 127,
+    ck_assert_msg(it->cidr_prefix == 127,
                 "IP CIDR prefix 0 doesn't match");
 
     ipset_iterator_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "IP set should contain 1 elements");
 
     ipset_iterator_free(it);
@@ -337,26 +337,26 @@ START_TEST(test_generic_ip_iterate_01)
     cork_ip_init(&ip2, "::");
 
     struct ipset_iterator  *it = ipset_iterate_networks(&set, false);
-    fail_if(it == NULL,
+    ck_assert_msg(!(it == NULL),
             "IP set iterator is NULL");
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "IP set shouldn't be empty");
-    fail_unless(cork_ip_equal(&ip1, &it->addr),
+    ck_assert_msg(cork_ip_equal(&ip1, &it->addr),
                 "IP address 0 doesn't match");
-    fail_unless(it->cidr_prefix == 0,
+    ck_assert_msg(it->cidr_prefix == 0,
                 "IP CIDR prefix 0 doesn't match");
 
     ipset_iterator_advance(it);
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "IP set should have more than 1 element");
-    fail_unless(cork_ip_equal(&ip2, &it->addr),
+    ck_assert_msg(cork_ip_equal(&ip2, &it->addr),
                 "IP address 1 doesn't match");
-    fail_unless(it->cidr_prefix == 0,
+    ck_assert_msg(it->cidr_prefix == 0,
                 "IP CIDR prefix 1 doesn't match");
 
     ipset_iterator_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "IP set should contain 2 elements");
 
     ipset_iterator_free(it);
@@ -385,32 +385,32 @@ START_TEST(test_generic_ip_iterate_02)
     struct cork_ip  ip2;
     cork_ip_init(&ip2, "c0a8:0001::");
 
-    fail_if(ipset_ip_add(&set, &ip1),
+    ck_assert_msg(!ipset_ip_add(&set, &ip1),
             "Element should not be present");
-    fail_if(ipset_ip_add_network(&set, &ip2, 32),
+    ck_assert_msg(!ipset_ip_add_network(&set, &ip2, 32),
             "Element should not be present");
 
     struct ipset_iterator  *it = ipset_iterate_networks(&set, true);
-    fail_if(it == NULL,
+    ck_assert_msg(!(it == NULL),
             "IP set iterator is NULL");
 
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "IP set shouldn't be empty");
-    fail_unless(cork_ip_equal(&ip1, &it->addr),
+    ck_assert_msg(cork_ip_equal(&ip1, &it->addr),
                 "IP address 0 doesn't match");
-    fail_unless(it->cidr_prefix == 32,
+    ck_assert_msg(it->cidr_prefix == 32,
                 "IP CIDR prefix 0 doesn't match");
 
     ipset_iterator_advance(it);
-    fail_if(it->finished,
+    ck_assert_msg(!(it->finished),
             "IP set should have more than 1 element");
-    fail_unless(cork_ip_equal(&ip2, &it->addr),
+    ck_assert_msg(cork_ip_equal(&ip2, &it->addr),
                 "IP address 1 doesn't match");
-    fail_unless(it->cidr_prefix == 32,
+    ck_assert_msg(it->cidr_prefix == 32,
                 "IP CIDR prefix 1 doesn't match");
 
     ipset_iterator_advance(it);
-    fail_unless(it->finished,
+    ck_assert_msg(it->finished,
                 "IP set should contain 2 elements");
 
     ipset_iterator_free(it);
-- 
2.36.1

