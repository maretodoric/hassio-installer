--- a/src/main/cpp/blaze.cc
+++ b/src/main/cpp/blaze.cc
@@ -360,13 +360,6 @@ static vector<string> GetServerExeArgs(const blaze_util::Path &jvm_path,
   result.push_back("-XX:HeapDumpPath=" +
                    startup_options.output_base.AsJvmArgument());
 
-  // TODO(b/109998449): only assume JDK >= 9 for embedded JDKs
-  if (!startup_options.GetEmbeddedJavabase().IsEmpty()) {
-    // quiet warnings from com.google.protobuf.UnsafeUtil,
-    // see: https://github.com/google/protobuf/issues/3781
-    result.push_back("--add-opens=java.base/java.nio=ALL-UNNAMED");
-    result.push_back("--add-opens=java.base/java.lang=ALL-UNNAMED");
-  }
 
   vector<string> user_options = startup_options.host_jvm_args;
 
--- a/src/main/java/com/google/devtools/build/lib/unsafe/StringUnsafe.java
+++ b/src/main/java/com/google/devtools/build/lib/unsafe/StringUnsafe.java
@@ -72,10 +72,7 @@ public class StringUnsafe {
               + Arrays.toString(String.class.getDeclaredFields()),
           e);
     }
-    this.constructor.setAccessible(true);
-    valueField.setAccessible(true);
     valueOffset = UnsafeProvider.getInstance().objectFieldOffset(valueField);
-    coderField.setAccessible(true);
     coderOffset = UnsafeProvider.getInstance().objectFieldOffset(coderField);
   }
 
