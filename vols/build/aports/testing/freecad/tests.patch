--- ./src/Mod/Mesh/App/MeshTestsApp.py
+++ ./src/Mod/Mesh/App/MeshTestsApp.py
@@ -190,30 +190,6 @@
         self.planarMesh = []
         FreeCAD.newDocument("MeshTest")
 
-    def testRayPick(self):
-        if not FreeCAD.GuiUp:
-            return
-        self.planarMesh.append( [-16.097176,-29.891157,15.987688] ) 
-        self.planarMesh.append( [-16.176304,-29.859991,15.947966] )
-        self.planarMesh.append( [-16.071451,-29.900553,15.912505] )
-        self.planarMesh.append( [-16.092241,-29.893408,16.020439] )
-        self.planarMesh.append( [-16.007210,-29.926180,15.967641] )
-        self.planarMesh.append( [-16.064457,-29.904951,16.090832] )
-        planarMeshObject = Mesh.Mesh(self.planarMesh)
-
-        from pivy import coin; import FreeCADGui
-        Mesh.show(planarMeshObject)
-        view=FreeCADGui.ActiveDocument.ActiveView.getViewer()
-        rp=coin.SoRayPickAction(view.getSoRenderManager().getViewportRegion())
-        rp.setRay(coin.SbVec3f(-16.05,16.0,16.0),coin.SbVec3f(0,-1,0))
-        rp.apply(view.getSoRenderManager().getSceneGraph())
-        pp=rp.getPickedPoint()
-        self.failUnless(pp != None)
-        det=pp.getDetail()
-        self.failUnless(det.getTypeId() == coin.SoFaceDetail.getClassTypeId())
-        det=coin.cast(det,str(det.getTypeId().getName()))
-        self.failUnless(det.getFaceIndex() == 1)
-
     def testPrimitiveCount(self):
         if not FreeCAD.GuiUp:
             return
--- ./src/Mod/Fem/femtest/test_commands.sh
+++ ./src/Mod/Fem/femtest/test_commands.sh
@@ -95,11 +95,6 @@
 make -j 4 && ./bin/FreeCADCmd -t femtest.app.test_solver_calculix.TestSolverCalculix.test_thermomech_bimetall
 make -j 4 && ./bin/FreeCADCmd -t femtest.app.test_solver_calculix.TestSolverCalculix.test_thermomech_flow1D
 make -j 4 && ./bin/FreeCADCmd -t femtest.app.test_solver_calculix.TestSolverCalculix.test_thermomech_spine
-make -j 4 && ./bin/FreeCADCmd -t femtest.app.test_solver_elmer.TestSolverElmer.test_box_static_0_mm
-make -j 4 && ./bin/FreeCADCmd -t femtest.app.test_solver_elmer.TestSolverElmer.test_ccxcantilever_faceload_0_mm
-make -j 4 && ./bin/FreeCADCmd -t femtest.app.test_solver_elmer.TestSolverElmer.test_ccxcantilever_faceload_1_si
-make -j 4 && ./bin/FreeCADCmd -t femtest.app.test_solver_elmer.TestSolverElmer.test_ccxcantilever_nodeload_0_mm
-make -j 4 && ./bin/FreeCADCmd -t femtest.app.test_solver_elmer.TestSolverElmer.test_ccxcantilever_prescribeddisplacement_0_mm
 make -j 4 && ./bin/FreeCADCmd -t femtest.app.test_solver_z88.TestSolverZ88.test_ccxcantilever_faceload
 make -j 4 && ./bin/FreeCADCmd -t femtest.app.test_solver_z88.TestSolverZ88.test_ccxcantilever_hexa20
 make -j 4 && ./bin/FreeCADCmd -t femtest.app.test_solver_z88.TestSolverZ88.test_ccxcantilever_nodeload
--- ./src/Mod/Fem/femtest/app/test_solver_elmer.py
+++ ./src/Mod/Fem/femtest/app/test_solver_elmer.py
@@ -106,109 +106,6 @@
         param.SetInt("UserSchema", new_unit_schema)
 
     # ********************************************************************************************
-    def test_box_static_0_mm(
-        self
-    ):
-        fcc_print("")
-        self.set_unit_schema(0)  # mm/kg/s
-
-        # set up the Elmer static analysis example
-        from femexamples.boxanalysis_static import setup
-        setup(self.document, "elmer")
-
-        # for information:
-        # elmer needs gmsh mesho object
-        # FIXME error message on Python solver run
-        # the examples do use a gmsh mesh object thus ok
-
-        base_name = get_namefromdef("test_")
-        analysis_dir = testtools.get_fem_test_tmp_dir(self.pre_dir_name + base_name)
-
-        # save the file
-        save_fc_file = join(analysis_dir, base_name + ".FCStd")
-        # fcc_print("Save FreeCAD file to {}...".format(save_fc_file))
-        self.document.saveAs(save_fc_file)
-
-        # write input files
-        # fcc_print("Checking FEM input file writing for Elmer solver framework solver ...")
-        machine_elmer = self.document.SolverElmer.Proxy.createMachine(
-            self.document.SolverElmer,
-            analysis_dir,
-            True
-        )
-        machine_elmer.target = femsolver.run.PREPARE
-        machine_elmer.start()
-        machine_elmer.join()  # wait for the machine to finish.
-
-        fcc_print("Test writing STARTINFO file")
-        startinfo_given = join(self.test_file_dir, "ELMERSOLVER_STARTINFO")
-        startinfo_totest = join(analysis_dir, "ELMERSOLVER_STARTINFO")
-        # fcc_print("Comparing {} to {}".format(startinfo_given, startinfo_totest))
-        ret = testtools.compare_files(startinfo_given, startinfo_totest)
-        self.assertFalse(ret, "STARTINFO write file test failed.\n{}".format(ret))
-
-        fcc_print("Test writing case file")
-        casefile_given = join(self.test_file_dir, base_name + self.ending)
-        casefile_totest = join(analysis_dir, self.infilename + self.ending)
-        # fcc_print("Comparing {} to {}".format(casefile_given, casefile_totest))
-        ret = testtools.compare_files(casefile_given, casefile_totest)
-        self.assertFalse(ret, "case write file test failed.\n{}".format(ret))
-
-        fcc_print("Test writing GMSH geo file")
-        gmshgeofile_given = join(self.test_file_dir, "group_mesh.geo")
-        gmshgeofile_totest = join(analysis_dir, "group_mesh.geo")
-        # fcc_print("Comparing {} to {}".format(gmshgeofile_given, gmshgeofile_totest))
-        ret = testtools.compare_files(gmshgeofile_given, gmshgeofile_totest)
-        self.assertFalse(ret, "GMSH geo write file test failed.\n{}".format(ret))
-
-    # ********************************************************************************************
-    def test_ccxcantilever_faceload_0_mm(
-        self
-    ):
-        fcc_print("")
-        self.set_unit_schema(0)  # mm/kg/s
-        from femexamples.ccx_cantilever_faceload import setup
-        setup(self.document, "elmer")
-        self.input_file_writing_test(get_namefromdef("test_"))
-
-    # ********************************************************************************************
-    def test_ccxcantilever_faceload_1_si(
-        self
-    ):
-        if sys.version_info.major < 3:
-            # TODO does not pass on Python 2
-            # https://travis-ci.org/github/FreeCAD/FreeCAD/builds/707885742
-            # https://api.travis-ci.org/v3/job/707885745/log.txt
-            fcc_print("Python 2: test aborted.")
-            return
-
-        fcc_print("")
-        self.set_unit_schema(1)  # SI-units m/kg/s
-        from femexamples.ccx_cantilever_faceload import setup
-        setup(self.document, "elmer")
-        self.input_file_writing_test(get_namefromdef("test_"))
-
-    # ********************************************************************************************
-    def test_ccxcantilever_nodeload_0_mm(
-        self
-    ):
-        fcc_print("")
-        self.set_unit_schema(0)  # mm/kg/s
-        from femexamples.ccx_cantilever_nodeload import setup
-        setup(self.document, "elmer")
-        self.input_file_writing_test(get_namefromdef("test_"))
-
-    # ********************************************************************************************
-    def test_ccxcantilever_prescribeddisplacement_0_mm(
-        self
-    ):
-        fcc_print("")
-        self.set_unit_schema(0)  # mm/kg/s
-        from femexamples.ccx_cantilever_prescribeddisplacement import setup
-        setup(self.document, "elmer")
-        self.input_file_writing_test(get_namefromdef("test_"))
-
-    # ********************************************************************************************
     def input_file_writing_test(
         self,
         base_name
