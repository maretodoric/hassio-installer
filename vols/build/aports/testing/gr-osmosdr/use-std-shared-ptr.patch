From 159885f9e67101834c100ceb7affc122e3f98bac Mon Sep 17 00:00:00 2001
From: Clayton Smith <argilo@gmail.com>
Date: Mon, 28 Dec 2020 22:27:22 -0500
Subject: Replace boost::shared_ptr with std::shared_ptr

Signed-off-by: Eric Wild <ewild@sysmocom.de>
---
 include/osmosdr/sink.h             | 2 +-
 include/osmosdr/source.h           | 2 +-
 lib/airspy/airspy_source_c.h       | 6 +++---
 lib/airspyhf/airspyhf_source_c.h   | 2 +-
 lib/bladerf/bladerf_sink_c.h       | 6 +++---
 lib/bladerf/bladerf_source_c.h     | 6 +++---
 lib/fcd/fcd_source_c.h             | 2 +-
 lib/file/file_sink_c.h             | 2 +-
 lib/file/file_source_c.h           | 2 +-
 lib/freesrp/freesrp_sink_c.h       | 6 +++---
 lib/freesrp/freesrp_source_c.h     | 6 +++---
 lib/hackrf/hackrf_sink_c.h         | 6 +++---
 lib/hackrf/hackrf_source_c.h       | 6 +++---
 lib/redpitaya/redpitaya_sink_c.h   | 2 +-
 lib/redpitaya/redpitaya_source_c.h | 2 +-
 lib/rfspace/rfspace_source_c.h     | 6 +++---
 lib/rtl/rtl_source_c.h             | 6 +++---
 lib/rtl_tcp/rtl_tcp_source_c.h     | 2 +-
 lib/rtl_tcp/rtl_tcp_source_f.h     | 2 +-
 lib/sdrplay/sdrplay_source_c.h     | 6 +++---
 lib/soapy/soapy_sink_c.h           | 6 +++---
 lib/soapy/soapy_source_c.h         | 6 +++---
 lib/uhd/uhd_sink_c.h               | 2 +-
 lib/uhd/uhd_source_c.h             | 2 +-
 lib/xtrx/xtrx_obj.h                | 2 +-
 lib/xtrx/xtrx_sink_c.h             | 2 +-
 lib/xtrx/xtrx_source_c.h           | 2 +-
 swig/osmosdr_swig.i                | 2 +-
 28 files changed, 52 insertions(+), 52 deletions(-)

diff --git a/include/osmosdr/sink.h b/include/osmosdr/sink.h
index 906976e..1f72a5e 100644
--- a/include/osmosdr/sink.h
+++ b/include/osmosdr/sink.h
@@ -38,7 +38,7 @@ class sink;
 class OSMOSDR_API sink : virtual public gr::hier_block2
 {
 public:
-  typedef boost::shared_ptr< sink > sptr;
+  typedef std::shared_ptr< sink > sptr;
 
   /*!
    * \brief Return a shared_ptr to a new instance of sink.
diff --git a/include/osmosdr/source.h b/include/osmosdr/source.h
index 88f8385..3ea716d 100644
--- a/include/osmosdr/source.h
+++ b/include/osmosdr/source.h
@@ -38,7 +38,7 @@ class source;
 class OSMOSDR_API source : virtual public gr::hier_block2
 {
 public:
-  typedef boost::shared_ptr< source > sptr;
+  typedef std::shared_ptr< source > sptr;
 
   /*!
    * \brief Return a shared_ptr to a new instance of source.
diff --git a/lib/airspy/airspy_source_c.h b/lib/airspy/airspy_source_c.h
index a7d817f..81add15 100644
--- a/lib/airspy/airspy_source_c.h
+++ b/lib/airspy/airspy_source_c.h
@@ -36,7 +36,7 @@
 class airspy_source_c;
 
 /*
- * We use boost::shared_ptr's instead of raw pointers for all access
+ * We use std::shared_ptr's instead of raw pointers for all access
  * to gr::blocks (and many other data structures).  The shared_ptr gets
  * us transparent reference counting, which greatly simplifies storage
  * management issues.  This is especially helpful in our hybrid
@@ -44,9 +44,9 @@ class airspy_source_c;
  *
  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  *
- * As a convention, the _sptr suffix indicates a boost::shared_ptr
+ * As a convention, the _sptr suffix indicates a std::shared_ptr
  */
-typedef boost::shared_ptr<airspy_source_c> airspy_source_c_sptr;
+typedef std::shared_ptr<airspy_source_c> airspy_source_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of airspy_source_c.
diff --git a/lib/airspyhf/airspyhf_source_c.h b/lib/airspyhf/airspyhf_source_c.h
index dbdd87a..d9dd952 100644
--- a/lib/airspyhf/airspyhf_source_c.h
+++ b/lib/airspyhf/airspyhf_source_c.h
@@ -35,7 +35,7 @@
 
 class airspyhf_source_c;
 
-typedef boost::shared_ptr<airspyhf_source_c> airspyhf_source_c_sptr;
+typedef std::shared_ptr<airspyhf_source_c> airspyhf_source_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of airspyhf_source_c.
diff --git a/lib/bladerf/bladerf_sink_c.h b/lib/bladerf/bladerf_sink_c.h
index 9f8a496..268f8df 100644
--- a/lib/bladerf/bladerf_sink_c.h
+++ b/lib/bladerf/bladerf_sink_c.h
@@ -30,7 +30,7 @@
 class bladerf_sink_c;
 
 /*
- * We use boost::shared_ptr's instead of raw pointers for all access
+ * We use std::shared_ptr's instead of raw pointers for all access
  * to gr_blocks (and many other data structures).  The shared_ptr gets
  * us transparent reference counting, which greatly simplifies storage
  * management issues.  This is especially helpful in our hybrid
@@ -38,9 +38,9 @@ class bladerf_sink_c;
  *
  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  *
- * As a convention, the _sptr suffix indicates a boost::shared_ptr
+ * As a convention, the _sptr suffix indicates a std::shared_ptr
  */
-typedef boost::shared_ptr<bladerf_sink_c> bladerf_sink_c_sptr;
+typedef std::shared_ptr<bladerf_sink_c> bladerf_sink_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of bladerf_sink_c.
diff --git a/lib/bladerf/bladerf_source_c.h b/lib/bladerf/bladerf_source_c.h
index 05f9ddf..0cc26f4 100644
--- a/lib/bladerf/bladerf_source_c.h
+++ b/lib/bladerf/bladerf_source_c.h
@@ -30,7 +30,7 @@
 class bladerf_source_c;
 
 /*
- * We use boost::shared_ptr's instead of raw pointers for all access
+ * We use std::shared_ptr's instead of raw pointers for all access
  * to gr_blocks (and many other data structures).  The shared_ptr gets
  * us transparent reference counting, which greatly simplifies storage
  * management issues.  This is especially helpful in our hybrid
@@ -38,9 +38,9 @@ class bladerf_source_c;
  *
  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  *
- * As a convention, the _sptr suffix indicates a boost::shared_ptr
+ * As a convention, the _sptr suffix indicates a std::shared_ptr
  */
-typedef boost::shared_ptr<bladerf_source_c> bladerf_source_c_sptr;
+typedef std::shared_ptr<bladerf_source_c> bladerf_source_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of bladerf_source_c.
diff --git a/lib/fcd/fcd_source_c.h b/lib/fcd/fcd_source_c.h
index 2b02eb1..876e237 100644
--- a/lib/fcd/fcd_source_c.h
+++ b/lib/fcd/fcd_source_c.h
@@ -29,7 +29,7 @@
 
 class fcd_source_c;
 
-typedef boost::shared_ptr< fcd_source_c > fcd_source_c_sptr;
+typedef std::shared_ptr< fcd_source_c > fcd_source_c_sptr;
 
 fcd_source_c_sptr make_fcd_source_c( const std::string & args = "" );
 
diff --git a/lib/file/file_sink_c.h b/lib/file/file_sink_c.h
index 6e59451..dac30f0 100644
--- a/lib/file/file_sink_c.h
+++ b/lib/file/file_sink_c.h
@@ -28,7 +28,7 @@
 
 class file_sink_c;
 
-typedef boost::shared_ptr< file_sink_c > file_sink_c_sptr;
+typedef std::shared_ptr< file_sink_c > file_sink_c_sptr;
 
 file_sink_c_sptr make_file_sink_c( const std::string & args = "" );
 
diff --git a/lib/file/file_source_c.h b/lib/file/file_source_c.h
index 3e03037..b3d8b47 100644
--- a/lib/file/file_source_c.h
+++ b/lib/file/file_source_c.h
@@ -28,7 +28,7 @@
 
 class file_source_c;
 
-typedef boost::shared_ptr< file_source_c > file_source_c_sptr;
+typedef std::shared_ptr< file_source_c > file_source_c_sptr;
 
 file_source_c_sptr make_file_source_c( const std::string & args = "" );
 
diff --git a/lib/freesrp/freesrp_sink_c.h b/lib/freesrp/freesrp_sink_c.h
index ce75785..23dd8ff 100644
--- a/lib/freesrp/freesrp_sink_c.h
+++ b/lib/freesrp/freesrp_sink_c.h
@@ -39,7 +39,7 @@
 class freesrp_sink_c;
 
 /*
- * We use boost::shared_ptr's instead of raw pointers for all access
+ * We use std::shared_ptr's instead of raw pointers for all access
  * to gr_blocks (and many other data structures).  The shared_ptr gets
  * us transparent reference counting, which greatly simplifies storage
  * management issues.  This is especially helpful in our hybrid
@@ -47,9 +47,9 @@ class freesrp_sink_c;
  *
  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  *
- * As a convention, the _sptr suffix indicates a boost::shared_ptr
+ * As a convention, the _sptr suffix indicates a std::shared_ptr
  */
-typedef boost::shared_ptr<freesrp_sink_c> freesrp_sink_c_sptr;
+typedef std::shared_ptr<freesrp_sink_c> freesrp_sink_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of freesrp_sink_c.
diff --git a/lib/freesrp/freesrp_source_c.h b/lib/freesrp/freesrp_source_c.h
index 08f115c..6b1604c 100644
--- a/lib/freesrp/freesrp_source_c.h
+++ b/lib/freesrp/freesrp_source_c.h
@@ -40,7 +40,7 @@
 class freesrp_source_c;
 
 /*
- * We use boost::shared_ptr's instead of raw pointers for all access
+ * We use std::shared_ptr's instead of raw pointers for all access
  * to gr_blocks (and many other data structures).  The shared_ptr gets
  * us transparent reference counting, which greatly simplifies storage
  * management issues.  This is especially helpful in our hybrid
@@ -48,9 +48,9 @@ class freesrp_source_c;
  *
  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  *
- * As a convention, the _sptr suffix indicates a boost::shared_ptr
+ * As a convention, the _sptr suffix indicates a std::shared_ptr
  */
-typedef boost::shared_ptr<freesrp_source_c> freesrp_source_c_sptr;
+typedef std::shared_ptr<freesrp_source_c> freesrp_source_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of freesrp_source_c.
diff --git a/lib/hackrf/hackrf_sink_c.h b/lib/hackrf/hackrf_sink_c.h
index 08ff2ca..ef719f3 100644
--- a/lib/hackrf/hackrf_sink_c.h
+++ b/lib/hackrf/hackrf_sink_c.h
@@ -45,7 +45,7 @@ typedef struct circular_buffer
 } circular_buffer_t;
 
 /*
- * We use boost::shared_ptr's instead of raw pointers for all access
+ * We use std::shared_ptr's instead of raw pointers for all access
  * to gr::blocks (and many other data structures).  The shared_ptr gets
  * us transparent reference counting, which greatly simplifies storage
  * management issues.  This is especially helpful in our hybrid
@@ -53,9 +53,9 @@ typedef struct circular_buffer
  *
  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  *
- * As a convention, the _sptr suffix indicates a boost::shared_ptr
+ * As a convention, the _sptr suffix indicates a std::shared_ptr
  */
-typedef boost::shared_ptr<hackrf_sink_c> hackrf_sink_c_sptr;
+typedef std::shared_ptr<hackrf_sink_c> hackrf_sink_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of hackrf_sink_c.
diff --git a/lib/hackrf/hackrf_source_c.h b/lib/hackrf/hackrf_source_c.h
index 0d38ac0..55a0fbb 100644
--- a/lib/hackrf/hackrf_source_c.h
+++ b/lib/hackrf/hackrf_source_c.h
@@ -34,7 +34,7 @@
 class hackrf_source_c;
 
 /*
- * We use boost::shared_ptr's instead of raw pointers for all access
+ * We use std::shared_ptr's instead of raw pointers for all access
  * to gr::blocks (and many other data structures).  The shared_ptr gets
  * us transparent reference counting, which greatly simplifies storage
  * management issues.  This is especially helpful in our hybrid
@@ -42,9 +42,9 @@ class hackrf_source_c;
  *
  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  *
- * As a convention, the _sptr suffix indicates a boost::shared_ptr
+ * As a convention, the _sptr suffix indicates a std::shared_ptr
  */
-typedef boost::shared_ptr<hackrf_source_c> hackrf_source_c_sptr;
+typedef std::shared_ptr<hackrf_source_c> hackrf_source_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of hackrf_source_c.
diff --git a/lib/redpitaya/redpitaya_sink_c.h b/lib/redpitaya/redpitaya_sink_c.h
index e03a13a..fceaa77 100644
--- a/lib/redpitaya/redpitaya_sink_c.h
+++ b/lib/redpitaya/redpitaya_sink_c.h
@@ -29,7 +29,7 @@
 
 class redpitaya_sink_c;
 
-typedef boost::shared_ptr< redpitaya_sink_c > redpitaya_sink_c_sptr;
+typedef std::shared_ptr< redpitaya_sink_c > redpitaya_sink_c_sptr;
 
 redpitaya_sink_c_sptr make_redpitaya_sink_c( const std::string & args = "" );
 
diff --git a/lib/redpitaya/redpitaya_source_c.h b/lib/redpitaya/redpitaya_source_c.h
index 7d536ee..f4a2d80 100644
--- a/lib/redpitaya/redpitaya_source_c.h
+++ b/lib/redpitaya/redpitaya_source_c.h
@@ -29,7 +29,7 @@
 
 class redpitaya_source_c;
 
-typedef boost::shared_ptr< redpitaya_source_c > redpitaya_source_c_sptr;
+typedef std::shared_ptr< redpitaya_source_c > redpitaya_source_c_sptr;
 
 redpitaya_source_c_sptr make_redpitaya_source_c( const std::string & args = "" );
 
diff --git a/lib/rfspace/rfspace_source_c.h b/lib/rfspace/rfspace_source_c.h
index d2bf66d..996f47b 100644
--- a/lib/rfspace/rfspace_source_c.h
+++ b/lib/rfspace/rfspace_source_c.h
@@ -38,7 +38,7 @@ class rfspace_source_c;
 #endif
 
 /*
- * We use boost::shared_ptr's instead of raw pointers for all access
+ * We use std::shared_ptr's instead of raw pointers for all access
  * to gr_blocks (and many other data structures).  The shared_ptr gets
  * us transparent reference counting, which greatly simplifies storage
  * management issues.  This is especially helpful in our hybrid
@@ -46,9 +46,9 @@ class rfspace_source_c;
  *
  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  *
- * As a convention, the _sptr suffix indicates a boost::shared_ptr
+ * As a convention, the _sptr suffix indicates a std::shared_ptr
  */
-typedef boost::shared_ptr<rfspace_source_c> rfspace_source_c_sptr;
+typedef std::shared_ptr<rfspace_source_c> rfspace_source_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of rfspace_source_c.
diff --git a/lib/rtl/rtl_source_c.h b/lib/rtl/rtl_source_c.h
index de3e349..99f14f4 100644
--- a/lib/rtl/rtl_source_c.h
+++ b/lib/rtl/rtl_source_c.h
@@ -35,7 +35,7 @@ class rtl_source_c;
 typedef struct rtlsdr_dev rtlsdr_dev_t;
 
 /*
- * We use boost::shared_ptr's instead of raw pointers for all access
+ * We use std::shared_ptr's instead of raw pointers for all access
  * to gr::blocks (and many other data structures).  The shared_ptr gets
  * us transparent reference counting, which greatly simplifies storage
  * management issues.  This is especially helpful in our hybrid
@@ -43,9 +43,9 @@ typedef struct rtlsdr_dev rtlsdr_dev_t;
  *
  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  *
- * As a convention, the _sptr suffix indicates a boost::shared_ptr
+ * As a convention, the _sptr suffix indicates a std::shared_ptr
  */
-typedef boost::shared_ptr<rtl_source_c> rtl_source_c_sptr;
+typedef std::shared_ptr<rtl_source_c> rtl_source_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of rtl_source_c.
diff --git a/lib/rtl_tcp/rtl_tcp_source_c.h b/lib/rtl_tcp/rtl_tcp_source_c.h
index b07e5dd..2c11018 100644
--- a/lib/rtl_tcp/rtl_tcp_source_c.h
+++ b/lib/rtl_tcp/rtl_tcp_source_c.h
@@ -26,7 +26,7 @@
 
 class rtl_tcp_source_c;
 
-typedef boost::shared_ptr< rtl_tcp_source_c > rtl_tcp_source_c_sptr;
+typedef std::shared_ptr< rtl_tcp_source_c > rtl_tcp_source_c_sptr;
 
 rtl_tcp_source_c_sptr make_rtl_tcp_source_c( const std::string & args = "" );
 
diff --git a/lib/rtl_tcp/rtl_tcp_source_f.h b/lib/rtl_tcp/rtl_tcp_source_f.h
index 84ac57a..e9bc87d 100644
--- a/lib/rtl_tcp/rtl_tcp_source_f.h
+++ b/lib/rtl_tcp/rtl_tcp_source_f.h
@@ -59,7 +59,7 @@ enum rtlsdr_tuner {
 };
 
 class rtl_tcp_source_f;
-typedef boost::shared_ptr<rtl_tcp_source_f> rtl_tcp_source_f_sptr;
+typedef std::shared_ptr<rtl_tcp_source_f> rtl_tcp_source_f_sptr;
 
 rtl_tcp_source_f_sptr make_rtl_tcp_source_f (
     size_t itemsize,
diff --git a/lib/sdrplay/sdrplay_source_c.h b/lib/sdrplay/sdrplay_source_c.h
index b59f44a..9ea6cb9 100644
--- a/lib/sdrplay/sdrplay_source_c.h
+++ b/lib/sdrplay/sdrplay_source_c.h
@@ -36,7 +36,7 @@ class sdrplay_source_c;
 typedef struct sdrplay_dev sdrplay_dev_t;
 
 /*
- * We use boost::shared_ptr's instead of raw pointers for all access
+ * We use std::shared_ptr's instead of raw pointers for all access
  * to gr::blocks (and many other data structures).  The shared_ptr gets
  * us transparent reference counting, which greatly simplifies storage
  * management issues.  This is especially helpful in our hybrid
@@ -44,9 +44,9 @@ typedef struct sdrplay_dev sdrplay_dev_t;
  *
  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  *
- * As a convention, the _sptr suffix indicates a boost::shared_ptr
+ * As a convention, the _sptr suffix indicates a std::shared_ptr
  */
-typedef boost::shared_ptr<sdrplay_source_c> sdrplay_source_c_sptr;
+typedef std::shared_ptr<sdrplay_source_c> sdrplay_source_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of sdrplay_source_c.
diff --git a/lib/soapy/soapy_sink_c.h b/lib/soapy/soapy_sink_c.h
index 4900d15..514f954 100644
--- a/lib/soapy/soapy_sink_c.h
+++ b/lib/soapy/soapy_sink_c.h
@@ -36,7 +36,7 @@ namespace SoapySDR
 }
 
 /*
- * We use boost::shared_ptr's instead of raw pointers for all access
+ * We use std::shared_ptr's instead of raw pointers for all access
  * to gr_blocks (and many other data structures).  The shared_ptr gets
  * us transparent reference counting, which greatly simplifies storage
  * management issues.  This is especially helpful in our hybrid
@@ -44,9 +44,9 @@ namespace SoapySDR
  *
  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  *
- * As a convention, the _sptr suffix indicates a boost::shared_ptr
+ * As a convention, the _sptr suffix indicates a std::shared_ptr
  */
-typedef boost::shared_ptr<soapy_sink_c> soapy_sink_c_sptr;
+typedef std::shared_ptr<soapy_sink_c> soapy_sink_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of soapy_sink_c.
diff --git a/lib/soapy/soapy_source_c.h b/lib/soapy/soapy_source_c.h
index b4db1ce..7ae6322 100644
--- a/lib/soapy/soapy_source_c.h
+++ b/lib/soapy/soapy_source_c.h
@@ -36,7 +36,7 @@ namespace SoapySDR
 }
 
 /*
- * We use boost::shared_ptr's instead of raw pointers for all access
+ * We use std::shared_ptr's instead of raw pointers for all access
  * to gr_blocks (and many other data structures).  The shared_ptr gets
  * us transparent reference counting, which greatly simplifies storage
  * management issues.  This is especially helpful in our hybrid
@@ -44,9 +44,9 @@ namespace SoapySDR
  *
  * See http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  *
- * As a convention, the _sptr suffix indicates a boost::shared_ptr
+ * As a convention, the _sptr suffix indicates a std::shared_ptr
  */
-typedef boost::shared_ptr<soapy_source_c> soapy_source_c_sptr;
+typedef std::shared_ptr<soapy_source_c> soapy_source_c_sptr;
 
 /*!
  * \brief Return a shared_ptr to a new instance of soapy_source_c.
diff --git a/lib/uhd/uhd_sink_c.h b/lib/uhd/uhd_sink_c.h
index 700fe4a..9b673b0 100644
--- a/lib/uhd/uhd_sink_c.h
+++ b/lib/uhd/uhd_sink_c.h
@@ -27,7 +27,7 @@
 
 class uhd_sink_c;
 
-typedef boost::shared_ptr< uhd_sink_c > uhd_sink_c_sptr;
+typedef std::shared_ptr< uhd_sink_c > uhd_sink_c_sptr;
 
 uhd_sink_c_sptr make_uhd_sink_c(const std::string &args = "");
 
diff --git a/lib/uhd/uhd_source_c.h b/lib/uhd/uhd_source_c.h
index e80be99..f3b2797 100644
--- a/lib/uhd/uhd_source_c.h
+++ b/lib/uhd/uhd_source_c.h
@@ -27,7 +27,7 @@
 
 class uhd_source_c;
 
-typedef boost::shared_ptr< uhd_source_c > uhd_source_c_sptr;
+typedef std::shared_ptr< uhd_source_c > uhd_source_c_sptr;
 
 uhd_source_c_sptr make_uhd_source_c(const std::string &args = "");
 
diff --git a/lib/xtrx/xtrx_obj.h b/lib/xtrx/xtrx_obj.h
index e26947d..8f64260 100644
--- a/lib/xtrx/xtrx_obj.h
+++ b/lib/xtrx/xtrx_obj.h
@@ -28,7 +28,7 @@
 
 class xtrx_obj;
 
-typedef boost::shared_ptr<xtrx_obj> xtrx_obj_sptr;
+typedef std::shared_ptr<xtrx_obj> xtrx_obj_sptr;
 
 class xtrx_obj
 {
diff --git a/lib/xtrx/xtrx_sink_c.h b/lib/xtrx/xtrx_sink_c.h
index 1263858..e923900 100644
--- a/lib/xtrx/xtrx_sink_c.h
+++ b/lib/xtrx/xtrx_sink_c.h
@@ -36,7 +36,7 @@ static const pmt::pmt_t COMMAND_KEY = pmt::string_to_symbol("tx_command");
 
 class xtrx_sink_c;
 
-typedef boost::shared_ptr< xtrx_sink_c > xtrx_sink_c_sptr;
+typedef std::shared_ptr< xtrx_sink_c > xtrx_sink_c_sptr;
 
 xtrx_sink_c_sptr make_xtrx_sink_c( const std::string & args = "" );
 
diff --git a/lib/xtrx/xtrx_source_c.h b/lib/xtrx/xtrx_source_c.h
index fda9d77..6ec2fb2 100644
--- a/lib/xtrx/xtrx_source_c.h
+++ b/lib/xtrx/xtrx_source_c.h
@@ -32,7 +32,7 @@ static const pmt::pmt_t FREQ_KEY = pmt::string_to_symbol("rx_freq");
 
 class xtrx_source_c;
 
-typedef boost::shared_ptr< xtrx_source_c > xtrx_source_c_sptr;
+typedef std::shared_ptr< xtrx_source_c > xtrx_source_c_sptr;
 
 xtrx_source_c_sptr make_xtrx_source_c( const std::string & args = "" );
 
diff --git a/swig/osmosdr_swig.i b/swig/osmosdr_swig.i
index 550008b..da42e6e 100644
--- a/swig/osmosdr_swig.i
+++ b/swig/osmosdr_swig.i
@@ -63,7 +63,7 @@
 };
 
 %define OSMOSDR_SWIG_BLOCK_MAGIC2(PKG, BASE_NAME)
-%template(BASE_NAME ## _sptr) boost::shared_ptr<PKG ## :: ## BASE_NAME>;
+%template(BASE_NAME ## _sptr) std::shared_ptr<PKG ## :: ## BASE_NAME>;
 %pythoncode %{
 BASE_NAME ## _sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
 BASE_NAME = BASE_NAME.make;
-- 
cgit v1.2.3

